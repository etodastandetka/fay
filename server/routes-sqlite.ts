import express, { type Express, Request, Response, NextFunction } from "express";
import { createServer, type Server } from "http";
import multer from "multer";
import path from "path";
import crypto from "crypto";
import fs from "fs";
import { db } from "./db-sqlite";
import { setupAuth } from "./auth-sqlite";
import { z } from "zod";
import { insertProductSchema, insertOrderSchema, insertReviewSchema, insertNotificationSchema, insertPaymentDetailsSchema } from "@shared/schema";

// –¢–∏–ø–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
type UserRecord = {
  id: string;
  email: string;
  password: string;
  first_name: string;
  last_name: string;
  phone?: string;
  address?: string;
  username?: string;
  is_admin: number;
  balance?: string;
  created_at: string;
  updated_at?: string;
};

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –∏–∑ auth-sqlite
import { updateUserSession as syncUserSession } from "./auth-sqlite";

// –ö—ç—à –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
const adminCache = new Set<string>();

// –§—É–Ω–∫—Ü–∏—è —Ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞—Ä–æ–ª—è (–¥–ª—è SQLite —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏)
function hashPassword(password: string): string {
  return crypto.createHash('sha256').update(password).digest('hex');
}

// –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∞—Ä–æ–ª—è
function verifyPassword(inputPassword: string, hashedPassword: string): boolean {
  const hashedInput = hashPassword(inputPassword);
  return hashedInput === hashedPassword;
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤
const fileStorage = multer.diskStorage({
  destination: function (req: any, file: any, cb: any) {
    const uploadDir = path.join(process.cwd(), "uploads");
    
    // Create directory if it doesn't exist
    if (!fs.existsSync(uploadDir)) {
      fs.mkdirSync(uploadDir, { recursive: true });
    }
    
    cb(null, uploadDir);
  },
  filename: function (req: any, file: any, cb: any) {
    const uniqueSuffix = Date.now() + "-" + Math.round(Math.random() * 1e9);
    cb(null, uniqueSuffix + path.extname(file.originalname));
  },
});

const upload = multer({
  storage: fileStorage,
  limits: { fileSize: 5 * 1024 * 1024 }, // 5MB
  fileFilter: (req: any, file: any, cb: any) => {
    if (file.mimetype.startsWith("image/")) {
      cb(null, true);
    } else {
      cb(new Error("–†–∞–∑—Ä–µ—à–µ–Ω—ã —Ç–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"));
    }
  },
});

// Middleware –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
function preserveAdminStatus(req: Request, res: Response, next: Function) {
  if (req.isAuthenticated() && req.user) {
    const user = req.user as any;
    const userId = user.id;
    
    // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤ –∫—ç—à–µ –∞–¥–º–∏–Ω–æ–≤
    if (adminCache.has(userId)) {
      console.log(`üîí –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
      user.isAdmin = true;
      user.is_admin = 1;
    }
    
    // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–º–µ–µ—Ç –ø—Ä–∏–∑–Ω–∞–∫ –∞–¥–º–∏–Ω–∞, –¥–æ–±–∞–≤–ª—è–µ–º –≤ –∫—ç—à
    if (user.isAdmin === true || user.is_admin === 1) {
      console.log(`‚úÖ –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
      adminCache.add(userId);
    }
  }
  next();
}

export async function registerRoutes(app: Express): Promise<Server> {
  // Sets up authentication routes
  setupAuth(app);
  
  // –î–æ–±–∞–≤–ª—è–µ–º middleware –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
  app.use(preserveAdminStatus);
  
  // Serve static uploads
  app.use("/uploads", express.static(path.join(process.cwd(), "uploads")));
  
  // Upload image route
  app.post("/api/upload", ensureAdmin, upload.single("image"), (req, res) => {
    try {
      if (!req.file) {
        return res.status(400).json({ message: "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ" });
      }
      
      // –°–æ–∑–¥–∞–µ–º URL –∫ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É
      const imageUrl = `/uploads/${req.file.filename}`;
      console.log(`–§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω: ${imageUrl}`);
      
      res.json({ 
        message: "–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω", 
        imageUrl: imageUrl,
        file: req.file
      });
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞:", error);
      res.status(500).json({ message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞" });
    }
  });
  
  // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø—Ä—è–º–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
  app.post("/api/upload-images", ensureAdmin, upload.array("images", 10), (req, res) => {
    try {
      if (!req.files || req.files.length === 0) {
        return res.status(400).json({ message: "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã" });
      }
      
      // –°–æ–∑–¥–∞–µ–º URL –∫ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–º —Ñ–∞–π–ª–∞–º
      const imageUrls: string[] = [];
      const files = req.files as Express.Multer.File[];
      
      files.forEach(file => {
        const imageUrl = `/uploads/${file.filename}`;
        imageUrls.push(imageUrl);
        console.log(`–§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω: ${imageUrl}`);
      });
      
      res.json({ 
        message: "–§–∞–π–ª—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã", 
        imageUrls: imageUrls
      });
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–æ–≤:", error);
      res.status(500).json({ message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–æ–≤" });
    }
  });
  
  // Product routes
  app.get("/api/products", async (req, res) => {
    try {
      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
      const rawProducts = db.query("SELECT * FROM products");
      
      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î –≤ —Ñ–æ—Ä–º–∞—Ç, –ø–æ–Ω—è—Ç–Ω—ã–π –∫–ª–∏–µ–Ω—Ç—É
      const products = rawProducts.map(product => formatProductForClient(product));
      
      // Apply filters if specified in query params
      let filteredProducts = products.filter(Boolean); // –£–¥–∞–ª—è–µ–º null –∑–Ω–∞—á–µ–Ω–∏—è
      
      // Filter by category
      if (req.query.category) {
        filteredProducts = filteredProducts.filter(
          product => product && product.category === req.query.category
        );
      }
      
      // Filter by availability
      if (req.query.available === "true") {
        filteredProducts = filteredProducts.filter(
          product => product && product.isAvailable && product.quantity > 0
        );
      }
      
      // Filter by preorder status
      if (req.query.preorder === "true") {
        filteredProducts = filteredProducts.filter(
          product => product && product.isPreorder
        );
      }
      
      // Filter by search term
      if (req.query.search) {
        const searchTerm = (req.query.search as string).toLowerCase();
        filteredProducts = filteredProducts.filter(
          product => 
            product && (
            product.name.toLowerCase().includes(searchTerm) ||
            product.description.toLowerCase().includes(searchTerm)
            )
        );
      }
      
      // Filter by price range
      if (req.query.minPrice) {
        const minPrice = parseFloat(req.query.minPrice as string);
        filteredProducts = filteredProducts.filter(
          product => product && product.price >= minPrice
        );
      }
      
      if (req.query.maxPrice) {
        const maxPrice = parseFloat(req.query.maxPrice as string);
        filteredProducts = filteredProducts.filter(
          product => product && product.price <= maxPrice
        );
      }
      
      res.json(filteredProducts);
    } catch (error) {
      console.error("Error fetching products:", error);
      res.status(500).json({ message: "Failed to fetch products" });
    }
  });
  
  // Get product by ID
  app.get("/api/products/:id", async (req, res) => {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ ID —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º
      const productId = parseInt(req.params.id);
      if (isNaN(productId)) {
        return res.status(400).json({ message: "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID —Ç–æ–≤–∞—Ä–∞" });
      }
      
      const product = db.queryOne(
        "SELECT * FROM products WHERE id = ?",
        [productId]
      );
      
      if (!product) {
        return res.status(404).json({ message: "Product not found" });
      }
      
      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞
      const formattedProduct = formatProductForClient(product);
      
      res.json(formattedProduct);
    } catch (error) {
      console.error("Error fetching product:", error);
      res.status(500).json({ message: "Failed to fetch product" });
    }
  });
  
  // Create new product
  app.post("/api/products", ensureAdmin, async (req, res) => {
    try {
      console.log("Creating product with data:", req.body);
      
      // –í–∞–ª–∏–¥–∏—Ä—É–µ–º –∏ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
      const productData = req.body;
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
      if (!productData.name || !productData.price) {
        return res.status(400).json({ 
          message: "–ù–µ —É–∫–∞–∑–∞–Ω—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ —Ü–µ–Ω–∞ —Ç–æ–≤–∞—Ä–∞" 
        });
      }
      
      // –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –º–∞—Å—Å–∏–≤–æ–º —Å—Ç—Ä–æ–∫
      if (!productData.images) {
        productData.images = [];
      } else if (typeof productData.images === 'string') {
        productData.images = [productData.images];
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ —á–∏—Å–ª–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω—ã –≤ —á–∏—Å–ª–∞
      try {
      productData.price = parseFloat(productData.price);
        if (isNaN(productData.price)) {
          return res.status(400).json({ message: "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ü–µ–Ω—ã" });
        }
        
      if (productData.originalPrice) {
        productData.originalPrice = parseFloat(productData.originalPrice);
          if (isNaN(productData.originalPrice)) {
            return res.status(400).json({ message: "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏—Å—Ö–æ–¥–Ω–æ–π —Ü–µ–Ω—ã" });
          }
        }
        
        productData.quantity = parseInt(productData.quantity || "0");
        if (isNaN(productData.quantity)) {
          return res.status(400).json({ message: "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞" });
        }
        
      if (productData.deliveryCost) {
        productData.deliveryCost = parseFloat(productData.deliveryCost);
          if (isNaN(productData.deliveryCost)) {
            return res.status(400).json({ message: "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –¥–æ—Å—Ç–∞–≤–∫–∏" });
          }
        }
      } catch (error) {
        console.error("Error parsing numeric values:", error);
        return res.status(400).json({ message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —á–∏—Å–ª–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π" });
      }
      
      // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–ª–∞–≥–∏ (–±—É–ª–µ–≤—ã –∑–Ω–∞—á–µ–Ω–∏—è)
      productData.isAvailable = productData.isAvailable === true || productData.isAvailable === 'true';
      productData.isPreorder = productData.isPreorder === true || productData.isPreorder === 'true';
      productData.isRare = productData.isRare === true || productData.isRare === 'true';
      productData.isEasyToCare = productData.isEasyToCare === true || productData.isEasyToCare === 'true';
      
      // –°–æ–∑–¥–∞–µ–º —Ç–æ–≤–∞—Ä
      try {
        // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∏–º, —á—Ç–æ –≤ —Ç–∞–±–ª–∏—Ü–µ –µ—Å—Ç—å –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Å—Ç–æ–ª–±—Ü—ã
        try {
          const tableInfo = db.query("PRAGMA table_info(products)");
          const columns = tableInfo.map((col: any) => col.name);
          const requiredColumns = [
            'name', 'description', 'price', 'original_price', 'images', 'quantity', 
            'category', 'is_available', 'is_preorder', 'is_rare', 'is_easy_to_care',
            'labels', 'delivery_cost'
          ];
          
          const missingColumns = requiredColumns.filter(col => !columns.includes(col));
          
          if (missingColumns.length > 0) {
            console.error(`–í —Ç–∞–±–ª–∏—Ü–µ products –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Å—Ç–æ–ª–±—Ü—ã: ${missingColumns.join(', ')}`);
            return res.status(500).json({ 
              message: "–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç—Ä–µ–±—É–µ–º–æ–π. –í—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É update-db-schema.bat" 
            });
          }
        } catch (err) {
          console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–∞–±–ª–∏—Ü—ã:", err);
        }
      
      // –°–æ–∑–¥–∞–µ–º —Ç–æ–≤–∞—Ä
      const result = db.insert(
        `INSERT INTO products (
          name, description, price, original_price, 
          images, quantity, category, is_available, 
          is_preorder, is_rare, is_easy_to_care, 
          labels, delivery_cost, created_at
        ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)`,
        [
          productData.name, 
            productData.description || "", 
          productData.price, 
          productData.originalPrice || null, 
            JSON.stringify(productData.images || []), 
          productData.quantity || 0, 
            productData.category || "", 
          productData.isAvailable ? 1 : 0, 
          productData.isPreorder ? 1 : 0, 
          productData.isRare ? 1 : 0, 
          productData.isEasyToCare ? 1 : 0, 
          JSON.stringify(productData.labels || []), 
          productData.deliveryCost || 0,
          new Date().toISOString()
        ]
      );
      
        console.log("Product created successfully with result:", result);
        
        // –ü–æ–ª—É—á–∞–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä –ø–æ –µ–≥–æ ID
        try {
          console.log("ID –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞:", result);
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ result - —ç—Ç–æ —á–∏—Å–ª–æ
          if (result === undefined || result === null) {
            console.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞");
            return res.status(500).json({ message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞: –Ω–µ –ø–æ–ª—É—á–µ–Ω ID" });
          }
          
          // –°—Ä–∞–∑—É –ø–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä –ø–æ ID
          const newProduct = db.queryOne(
        "SELECT * FROM products WHERE id = ?",
            [result]
          );
          
          if (!newProduct) {
            console.error(`–¢–æ–≤–∞—Ä —Å ID ${result} –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è`);
            
            // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä
            const lastProduct = db.queryOne(
              "SELECT * FROM products ORDER BY id DESC LIMIT 1"
            );
            
            if (lastProduct) {
              console.log("–ù–∞–π–¥–µ–Ω –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ç–æ–≤–∞—Ä:", lastProduct);
              const formattedProduct = formatProductForClient(lastProduct);
              return res.status(201).json(formattedProduct);
            } else {
              return res.status(500).json({ message: "–¢–æ–≤–∞—Ä —Å–æ–∑–¥–∞–Ω, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ" });
            }
          }
          
          console.log("–ù–æ–≤—ã–π —Ç–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω:", newProduct);
          
          // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É JSON –≤ –º–∞—Å—Å–∏–≤ –¥–ª—è images –∏ labels
          const formattedProduct = formatProductForClient(newProduct);
          
          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä –∫–ª–∏–µ–Ω—Ç—É
          res.status(201).json(formattedProduct);
        } catch (queryError) {
          console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞:", queryError);
          return res.status(500).json({ message: "–¢–æ–≤–∞—Ä —Å–æ–∑–¥–∞–Ω, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ" });
        }
      } catch (dbError) {
        console.error("Database error creating product:", dbError);
        return res.status(500).json({ message: "–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞" });
      }
    } catch (error) {
      console.error("Error creating product:", error);
      res.status(500).json({ message: "Failed to create product", error: String(error) });
    }
  });
  
  // Update product
  app.put("/api/products/:id", ensureAdmin, async (req, res) => {
    try {
      const productId = req.params.id;
      const productData = req.body;
      
      console.log("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞, –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:", productData);
      
      // –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –º–∞—Å—Å–∏–≤–æ–º —Å—Ç—Ä–æ–∫
      if (!productData.images) {
        productData.images = [];
      } else if (typeof productData.images === 'string') {
        productData.images = [productData.images];
      }
      
      console.log("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞:", productData.images);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
      const existingProduct = db.query(
        "SELECT * FROM products WHERE id = ?",
        [productId]
      );
      
      if (existingProduct.length === 0) {
        return res.status(404).json({ message: "Product not found" });
      }
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä
      db.update(
        `UPDATE products SET
          name = ?,
          description = ?,
          price = ?,
          original_price = ?,
          images = ?,
          quantity = ?,
          category = ?,
          is_available = ?,
          is_preorder = ?,
          is_rare = ?,
          is_easy_to_care = ?,
          labels = ?,
          delivery_cost = ?,
          updated_at = ?
        WHERE id = ?`,
        [
          productData.name, 
          productData.description, 
          parseFloat(productData.price), 
          productData.originalPrice ? parseFloat(productData.originalPrice) : null, 
          JSON.stringify(productData.images), 
          parseInt(productData.quantity) || 0, 
          productData.category, 
          productData.isAvailable === true || productData.isAvailable === 'true' ? 1 : 0, 
          productData.isPreorder === true || productData.isPreorder === 'true' ? 1 : 0, 
          productData.isRare === true || productData.isRare === 'true' ? 1 : 0, 
          productData.isEasyToCare === true || productData.isEasyToCare === 'true' ? 1 : 0, 
          JSON.stringify(productData.labels || []), 
          productData.deliveryCost ? parseFloat(productData.deliveryCost) : 0,
          new Date().toISOString(),
          productId
        ]
      );
      
      try {
      // –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä
        const updatedProduct = db.queryOne(
        "SELECT * FROM products WHERE id = ?",
        [productId]
        );
        
        if (!updatedProduct) {
          return res.status(404).json({ message: "–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è" });
        }
        
        console.log("–¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω:", updatedProduct);
        
        // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–æ–≤–∞—Ä –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞
        const formattedProduct = formatProductForClient(updatedProduct);
        
        res.json(formattedProduct);
      } catch (queryError) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞:", queryError);
        return res.status(500).json({ message: "–¢–æ–≤–∞—Ä –æ–±–Ω–æ–≤–ª–µ–Ω, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ" });
      }
    } catch (error) {
      console.error("Error updating product:", error);
      res.status(500).json({ message: "Failed to update product" });
    }
  });
  
  // Delete product
  app.delete("/api/products/:id", ensureAdmin, async (req, res) => {
    try {
      const productId = req.params.id;
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ ID —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º
      if (isNaN(parseInt(productId))) {
        return res.status(400).json({ message: "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID —Ç–æ–≤–∞—Ä–∞" });
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
      const existingProduct = db.query(
        "SELECT * FROM products WHERE id = ?",
        [productId]
      );
      
      if (existingProduct.length === 0) {
        return res.status(404).json({ message: "Product not found" });
      }
      
      // –£–¥–∞–ª—è–µ–º —Ç–æ–≤–∞—Ä
      db.delete(
        "DELETE FROM products WHERE id = ?",
        [productId]
      );
      
      res.json({ message: "Product deleted successfully" });
    } catch (error) {
      console.error("Error deleting product:", error);
      res.status(500).json({ message: "Failed to delete product" });
    }
  });
  
  // Get unique categories
  app.get("/api/categories", async (req, res) => {
    try {
      const products = db.query("SELECT DISTINCT category FROM products WHERE category IS NOT NULL AND category != ''");
      const categories = products.map((product: any) => product.category).filter(Boolean);
      res.json(categories);
    } catch (error) {
      console.error("Error fetching categories:", error);
      res.status(500).json({ message: "Failed to fetch categories" });
    }
  });
  
  // –ú–∞—Ä—à—Ä—É—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–ª–∞—Ç–µ–∂–Ω—ã–º–∏ —Ä–µ–∫–≤–∏–∑–∏—Ç–∞–º–∏
  app.get("/api/payment-details", async (req, res) => {
    try {
      // –ü–æ–ª—É—á–∞–µ–º –ø–ª–∞—Ç–µ–∂–Ω—ã–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã (–±–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—É—é –∑–∞–ø–∏—Å—å)
      const paymentDetails = db.queryOne("SELECT * FROM payment_details LIMIT 1") as {
        id: number;
        card_number: string;
        card_holder: string;
        bank_name: string;
        qr_code_url: string;
        instructions: string;
        created_at: string;
        updated_at: string;
      } | null;
      
      if (!paymentDetails) {
        return res.status(404).json({ message: "–ü–ª–∞—Ç–µ–∂–Ω—ã–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã" });
      }
      
      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç, –æ–∂–∏–¥–∞–µ–º—ã–π –∫–ª–∏–µ–Ω—Ç–æ–º
      const formattedDetails = {
        id: paymentDetails.id,
        bankDetails: `–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã: ${paymentDetails.card_number}
–ü–æ–ª—É—á–∞—Ç–µ–ª—å: ${paymentDetails.card_holder}
–ë–∞–Ω–∫: ${paymentDetails.bank_name}

${paymentDetails.instructions}`,
        qrCodeUrl: paymentDetails.qr_code_url,
        updatedAt: paymentDetails.updated_at
      };
      
      res.json(formattedDetails);
    } catch (error) {
      console.error("Error fetching payment details:", error);
      res.status(500).json({ message: "Failed to fetch payment details" });
    }
  });
  
  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–Ω—ã—Ö —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤
  app.put("/api/payment-details", ensureAdmin, async (req, res) => {
    try {
      console.log("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–Ω—ã—Ö —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤:", req.body);
      const { bankDetails, cardNumber, cardHolder, bankName, instructions } = req.body;
      
      // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã
      const paymentDetails = db.queryOne("SELECT * FROM payment_details LIMIT 1") as {
        id: number;
        card_number: string;
        card_holder: string;
        bank_name: string;
        instructions: string;
        qr_code_url: string;
      } | null;
      
      // –ï—Å–ª–∏ –ø—Ä–∏—à–ª–∏ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ bankDetails, –ø–∞—Ä—Å–∏–º –∏—Ö
      let cardNum = cardNumber;
      let holder = cardHolder;
      let bank = bankName;
      let instrText = instructions;
      
      if (bankDetails) {
        // –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—è bankDetails
        const lines = bankDetails.split('\n');
        const cardLineMatch = lines.find((l: string) => l.includes('–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã:'));
        const holderLineMatch = lines.find((l: string) => l.includes('–ü–æ–ª—É—á–∞—Ç–µ–ª—å:'));
        const bankLineMatch = lines.find((l: string) => l.includes('–ë–∞–Ω–∫:'));
        
        if (cardLineMatch) {
          cardNum = cardLineMatch.replace('–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã:', '').trim();
        }
        
        if (holderLineMatch) {
          holder = holderLineMatch.replace('–ü–æ–ª—É—á–∞—Ç–µ–ª—å:', '').trim();
        }
        
        if (bankLineMatch) {
          bank = bankLineMatch.replace('–ë–∞–Ω–∫:', '').trim();
        }
        
        // –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ (–≤—Å—ë, —á—Ç–æ –ø–æ—Å–ª–µ –ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–∏)
        const emptyLineIndex = lines.findIndex((l: string) => l.trim() === '');
        if (emptyLineIndex !== -1 && emptyLineIndex < lines.length - 1) {
          instrText = lines.slice(emptyLineIndex + 1).join('\n');
        }
      }
      
      if (!paymentDetails) {
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å, –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        console.log("–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö –ø–ª–∞—Ç–µ–∂–Ω—ã—Ö —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤");
        const result = db.run(`
          INSERT INTO payment_details (
            card_number, card_holder, bank_name, instructions, qr_code_url
          ) VALUES (?, ?, ?, ?, ?)
        `, [
          cardNum || '', 
          holder || '', 
          bank || '', 
          instrText || '',
          '/uploads/default-qr.png'
        ]);
        
        const newDetails = db.queryOne("SELECT * FROM payment_details LIMIT 1") as {
          id: number;
          card_number: string;
          card_holder: string;
          bank_name: string;
          qr_code_url: string;
          instructions: string;
        };

        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç, –æ–∂–∏–¥–∞–µ–º—ã–π –∫–ª–∏–µ–Ω—Ç–æ–º
        const formattedDetails = {
          id: newDetails.id,
          bankDetails: `–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã: ${newDetails.card_number}
–ü–æ–ª—É—á–∞—Ç–µ–ª—å: ${newDetails.card_holder}
–ë–∞–Ω–∫: ${newDetails.bank_name}

${newDetails.instructions}`,
          qrCodeUrl: newDetails.qr_code_url,
          updatedAt: new Date().toISOString()
        };
        
        return res.json(formattedDetails);
      }
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å
      console.log("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–ª–∞—Ç–µ–∂–Ω—ã—Ö —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤ —Å –¥–∞–Ω–Ω—ã–º–∏:", {
        cardNum, holder, bank, instrText
      });
      
      const updateResult = db.run(`
        UPDATE payment_details SET 
        card_number = ?, 
        card_holder = ?, 
        bank_name = ?, 
        instructions = ?,
        updated_at = ?
        WHERE id = ?
      `, [
        cardNum || paymentDetails.card_number, 
        holder || paymentDetails.card_holder, 
        bank || paymentDetails.bank_name, 
        instrText || paymentDetails.instructions,
        new Date().toISOString(),
        paymentDetails.id
      ]);
      
      console.log("–û–±–Ω–æ–≤–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π:", updateResult.changes);
      
      const updatedDetails = db.queryOne("SELECT * FROM payment_details WHERE id = ?", [paymentDetails.id]) as {
        id: number;
        card_number: string;
        card_holder: string;
        bank_name: string;
        qr_code_url: string;
        instructions: string;
        updated_at: string;
      };
      
      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç, –æ–∂–∏–¥–∞–µ–º—ã–π –∫–ª–∏–µ–Ω—Ç–æ–º
      const formattedDetails = {
        id: updatedDetails.id,
        bankDetails: `–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã: ${updatedDetails.card_number}
–ü–æ–ª—É—á–∞—Ç–µ–ª—å: ${updatedDetails.card_holder}
–ë–∞–Ω–∫: ${updatedDetails.bank_name}

${updatedDetails.instructions}`,
        qrCodeUrl: updatedDetails.qr_code_url,
        updatedAt: updatedDetails.updated_at || new Date().toISOString()
      };
      
      res.json(formattedDetails);
    } catch (error) {
      console.error("Error updating payment details:", error);
      res.status(500).json({ message: "Failed to update payment details" });
    }
  });
  
  // –ó–∞–≥—Ä—É–∑–∫–∞ QR-–∫–æ–¥–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã
  app.post("/api/upload-qr-code", ensureAdmin, upload.single("qrCode"), (req, res) => {
    try {
      if (!req.file) {
        return res.status(400).json({ message: "QR-–∫–æ–¥ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω" });
      }
      
      // –°–æ–∑–¥–∞–µ–º URL –∫ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–º—É QR-–∫–æ–¥—É
      const qrCodeUrl = `/uploads/${req.file.filename}`;
      console.log(`QR-–∫–æ–¥ –∑–∞–≥—Ä—É–∂–µ–Ω: ${qrCodeUrl}`);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º URL QR-–∫–æ–¥–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
      const paymentDetails = db.queryOne("SELECT * FROM payment_details LIMIT 1") as {
        id: number;
      } | null;
      
      if (paymentDetails) {
        db.run(
          "UPDATE payment_details SET qr_code_url = ?, updated_at = ? WHERE id = ?",
          [qrCodeUrl, new Date().toISOString(), paymentDetails.id]
        );
      } else {
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å, –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        db.run(`
          INSERT INTO payment_details (
            qr_code_url, card_number, card_holder, bank_name, instructions
          ) VALUES (?, ?, ?, ?, ?)
        `, [
          qrCodeUrl, 
          '', 
          '', 
          '', 
          '–î–ª—è –æ–ø–ª–∞—Ç—ã –æ—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ QR-–∫–æ–¥ –∏–ª–∏ –ø–µ—Ä–µ–≤–µ–¥–∏—Ç–µ –¥–µ–Ω—å–≥–∏ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é –∫–∞—Ä—Ç—É'
        ]);
      }
      
      res.json({ 
        message: "QR-–∫–æ–¥ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω", 
        qrCodeUrl: qrCodeUrl
      });
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ QR-–∫–æ–¥–∞:", error);
      res.status(500).json({ message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ QR-–∫–æ–¥–∞" });
    }
  });
  
  // –ú–∞—Ä—à—Ä—É—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
  app.get("/api/settings", async (req, res) => {
    try {
      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
      const settings = db.query("SELECT * FROM settings") as Array<{key: string, value: string}>;
      
      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –æ–±—ä–µ–∫—Ç –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
      const settingsObj: Record<string, string> = {};
      settings.forEach(setting => {
        settingsObj[setting.key] = setting.value;
      });
      
      res.json(settingsObj);
    } catch (error) {
      console.error("Error fetching settings:", error);
      res.status(500).json({ message: "Failed to fetch settings" });
    }
  });
  
  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
  app.put("/api/settings", ensureAdmin, async (req, res) => {
    try {
      const updates = req.body;
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—É—é –Ω–∞—Å—Ç—Ä–æ–π–∫—É
      for (const [key, value] of Object.entries(updates)) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞
        const existingSetting = db.queryOne("SELECT * FROM settings WHERE key = ?", [key]);
        
        if (existingSetting) {
          // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –Ω–∞—Å—Ç—Ä–æ–π–∫—É
          db.run(
            "UPDATE settings SET value = ?, updated_at = ? WHERE key = ?",
            [value, new Date().toISOString(), key]
          );
        } else {
          // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –Ω–∞—Å—Ç—Ä–æ–π–∫—É
          db.run(
            "INSERT INTO settings (key, value) VALUES (?, ?)",
            [key, value]
          );
        }
      }
      
      // –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
      const settings = db.query("SELECT * FROM settings") as Array<{key: string, value: string}>;
      
      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –æ–±—ä–µ–∫—Ç –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
      const settingsObj: Record<string, string> = {};
      settings.forEach(setting => {
        settingsObj[setting.key] = setting.value;
      });
      
      res.json(settingsObj);
    } catch (error) {
      console.error("Error updating settings:", error);
      res.status(500).json({ message: "Failed to update settings" });
    }
  });
  
  // –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –Ω–∞–±–æ—Ä –º–∞—Ä—à—Ä—É—Ç–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  app.get('/api/test', (req, res) => {
    res.json({ message: 'SQLite API is working!' });
  });

  // –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ä—à—Ä—É—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –æ—Ç–∑—ã–≤–∞–º–∏
  app.get("/api/reviews", async (req, res) => {
    try {
      const { productId, approved } = req.query;
      
      if (productId) {
        // –ü–æ–ª—É—á–∞–µ–º –æ—Ç–∑—ã–≤—ã –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ (—Ç–æ–ª—å–∫–æ –æ–¥–æ–±—Ä–µ–Ω–Ω—ã–µ –¥–ª—è –ø—É–±–ª–∏—á–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞)
        const reviews = db.query(
          "SELECT * FROM reviews WHERE product_id = ? AND is_approved = 1 ORDER BY created_at DESC",
          [productId]
        ) as Array<{
          id: number;
          user_id: string | number;
          product_id: number;
          rating: number;
          text: string;
          is_approved: number;
          created_at: string;
          images: string;
        }>;
        
        // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç–∑—ã–≤—ã –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞
        const formattedReviews = reviews.map(review => ({
          id: review.id,
          userId: review.user_id,
          productId: review.product_id,
          rating: review.rating,
          text: review.text,
          isApproved: !!review.is_approved,
          createdAt: review.created_at,
          images: review.images ? JSON.parse(review.images) : []
        }));
        
        return res.json(formattedReviews);
      }
      
      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –æ—Ç–∑—ã–≤—ã (–¥–ª—è –∞–¥–º–∏–Ω–∫–∏)
      const reviews = db.query("SELECT * FROM reviews ORDER BY created_at DESC") as Array<{
        id: number;
        user_id: string | number;
        product_id: number;
        rating: number;
        text: string;
        is_approved: number;
        created_at: string;
        images: string;
      }>;
      
      // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç–∑—ã–≤—ã –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞
      const formattedReviews = reviews.map(review => ({
        id: review.id,
        userId: review.user_id,
        productId: review.product_id,
        rating: review.rating,
        text: review.text,
        isApproved: !!review.is_approved,
        createdAt: review.created_at,
        images: review.images ? JSON.parse(review.images) : []
      }));
      
      res.json(formattedReviews);
    } catch (error) {
      console.error("Error fetching reviews:", error);
      res.status(500).json({ message: "Failed to fetch reviews" });
    }
  });
  
  // –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ä—à—Ä—É—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –æ—Ç–∑—ã–≤–∞
  app.delete("/api/reviews/:id", ensureAdmin, async (req, res) => {
    try {
      const id = parseInt(req.params.id);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –æ—Ç–∑—ã–≤
      const review = db.queryOne("SELECT * FROM reviews WHERE id = ?", [id]);
      
      if (!review) {
        return res.status(404).json({ message: "–û—Ç–∑—ã–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω" });
      }
      
      // –£–¥–∞–ª—è–µ–º –æ—Ç–∑—ã–≤
      db.run("DELETE FROM reviews WHERE id = ?", [id]);
      
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—Ö
      return res.status(200).json({ message: "–û—Ç–∑—ã–≤ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω" });
    } catch (error) {
      console.error("Error deleting review:", error);
      res.status(500).json({ message: "Failed to delete review" });
    }
  });

  // –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ä—à—Ä—É—Ç –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–∑—ã–≤–∞ (admin)
  app.put("/api/reviews/:id", ensureAdmin, async (req, res) => {
    try {
      const id = parseInt(req.params.id);
      const { isApproved } = req.body;
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –æ—Ç–∑—ã–≤
      const review = db.queryOne("SELECT * FROM reviews WHERE id = ?", [id]) as {
        id: number;
        user_id: string | number;
        product_id: number;
        rating: number;
        text: string;
        is_approved: number;
        created_at: string;
        updated_at?: string;
        images?: string;
      } | null;
      
      if (!review) {
        return res.status(404).json({ message: "–û—Ç–∑—ã–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω" });
      }
      
      console.log(`–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –æ—Ç–∑—ã–≤–∞ #${id}: isApproved=${isApproved}`);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ç–∑—ã–≤–∞
      db.run(
        "UPDATE reviews SET is_approved = ?, updated_at = ? WHERE id = ?",
        [isApproved ? 1 : 0, new Date().toISOString(), id]
      );
      
      // –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –æ—Ç–∑—ã–≤
      const updatedReview = db.queryOne("SELECT * FROM reviews WHERE id = ?", [id]) as {
        id: number;
        user_id: string | number;
        product_id: number;
        rating: number;
        text: string;
        is_approved: number;
        created_at: string;
        updated_at?: string;
        images?: string;
      };
      
      if (!updatedReview) {
        return res.status(404).json({ message: "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –æ—Ç–∑—ã–≤" });
      }
      
      console.log(`–û—Ç–∑—ã–≤ #${id} –æ–±–Ω–æ–≤–ª–µ–Ω. –ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å: ${updatedReview.is_approved === 1 ? '–û–¥–æ–±—Ä–µ–Ω' : '–ù–µ –æ–¥–æ–±—Ä–µ–Ω'}`);
      
      // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç–∑—ã–≤ –¥–ª—è –æ—Ç–≤–µ—Ç–∞
      const formattedReview = {
        id: updatedReview.id,
        userId: updatedReview.user_id,
        productId: updatedReview.product_id,
        rating: updatedReview.rating,
        text: updatedReview.text,
        images: updatedReview.images ? JSON.parse(updatedReview.images) : [],
        isApproved: updatedReview.is_approved === 1,
        createdAt: updatedReview.created_at,
        updatedAt: updatedReview.updated_at
      };
      
      res.json({
        message: isApproved ? "–û—Ç–∑—ã–≤ —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω" : "–°—Ç–∞—Ç—É—Å –æ—Ç–∑—ã–≤–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω",
        review: formattedReview
      });
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –æ—Ç–∑—ã–≤–∞:", error);
      res.status(500).json({ message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –æ—Ç–∑—ã–≤–∞" });
    }
  });

  // –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ä—à—Ä—É—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç–∑—ã–≤–∞
  app.post("/api/reviews", ensureAuthenticated, async (req, res) => {
    try {
      const { productId, rating, text, images = [] } = req.body;
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω
      if (!req.user) {
        return res.status(401).json({ message: "–ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è" });
      }
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
      if (!productId || !rating || !text) {
        return res.status(400).json({ message: "–ù–µ —É–∫–∞–∑–∞–Ω—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è" });
      }
      
      // –°–æ–∑–¥–∞–µ–º –æ—Ç–∑—ã–≤
      const result = db.insert(
        `INSERT INTO reviews (
          user_id, product_id, rating, text, images, created_at
        ) VALUES (?, ?, ?, ?, ?, ?)`,
        [
          req.user.id,
          productId,
          rating,
          text,
          JSON.stringify(images || []),
          new Date().toISOString()
        ]
      );
      
      // –ü–æ–ª—É—á–∞–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–π –æ—Ç–∑—ã–≤
      const review = db.queryOne(
        "SELECT * FROM reviews WHERE id = ?",
        [result]
      ) as {
        id: number;
        user_id: string | number;
        product_id: number;
        rating: number;
        text: string;
        is_approved: number;
        created_at: string;
        images: string;
      };
      
      // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç–∑—ã–≤ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞
      const formattedReview = {
        id: review.id,
        userId: review.user_id,
        productId: review.product_id,
        rating: review.rating,
        text: review.text,
        isApproved: !!review.is_approved,
        createdAt: review.created_at,
        images: review.images ? JSON.parse(review.images) : []
      };
      
      res.status(201).json(formattedReview);
    } catch (error) {
      console.error("Error creating review:", error);
      res.status(500).json({ message: "Failed to create review" });
    }
  });

  // User routes
  app.get("/api/users", ensureAdmin, async (req, res) => {
    try {
      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –≤–∫–ª—é—á–∞—è —Ç–µ–∫—É—â–µ–≥–æ –∞–¥–º–∏–Ω–∞
      const users = db.query("SELECT * FROM users") as Array<{
        id: string;
        username: string;
        email: string;
        password: string;
        first_name: string;
        last_name: string;
        phone: string | null;
        address: string | null;
        is_admin: number;
        balance: string | null;
        created_at: string;
        updated_at: string;
      }>;
      
      // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ —É–¥–∞–ª—è–µ–º –ø–∞—Ä–æ–ª–∏
      const formattedUsers = users.map(user => ({
        id: user.id,
        username: user.username || user.email,
        email: user.email,
        fullName: `${user.first_name || ''} ${user.last_name || ''}`.trim(),
        phone: user.phone || '',
        address: user.address || '',
        isAdmin: !!user.is_admin,
        balance: user.balance || '0',
        createdAt: user.created_at
      }));
      
      res.json(formattedUsers);
    } catch (error) {
      console.error("Error fetching users:", error);
      res.status(500).json({ message: "Failed to fetch users" });
    }
  });

  // –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
  app.post("/api/users/:id/add-balance", ensureAdmin, async (req, res) => {
    try {
      const userId = req.params.id;
      const { amount } = req.body;
      
      if (!amount || isNaN(parseFloat(amount)) || parseFloat(amount) <= 0) {
        return res.status(400).json({ message: "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è" });
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
      const user = db.queryOne("SELECT * FROM users WHERE id = ?", [userId]) as {
        id: string;
        balance: string | null;
      } | null;
      
      if (!user) {
        return res.status(404).json({ message: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω" });
      }
      
      // –í—ã—á–∏—Å–ª—è–µ–º –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å
      const currentBalance = user.balance ? parseFloat(user.balance) : 0;
      const newBalance = (currentBalance + parseFloat(amount)).toString();
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      db.run(
        "UPDATE users SET balance = ?, updated_at = ? WHERE id = ?",
        [newBalance, new Date().toISOString(), userId]
      );
      
      // –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const updatedUser = db.queryOne("SELECT * FROM users WHERE id = ?", [userId]) as {
        id: string;
        username: string;
        email: string;
        password: string;
        first_name: string;
        last_name: string;
        phone: string | null;
        address: string | null;
        is_admin: number;
        balance: string | null;
        created_at: string;
        updated_at: string;
      };
      
      // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —É–¥–∞–ª—è–µ–º –ø–∞—Ä–æ–ª—å
      const formattedUser = {
        id: updatedUser.id,
        username: updatedUser.username || updatedUser.email,
        email: updatedUser.email,
        fullName: `${updatedUser.first_name || ''} ${updatedUser.last_name || ''}`.trim(),
        phone: updatedUser.phone || '',
        address: updatedUser.address || '',
        isAdmin: !!updatedUser.is_admin,
        balance: updatedUser.balance || '0',
        createdAt: updatedUser.created_at
      };
      
      res.json(formattedUser);
    } catch (error) {
      console.error("Error adding balance:", error);
      res.status(500).json({ message: "Failed to add balance" });
    }
  });

  // –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ Excel
  app.get("/api/export/statistics", ensureAdmin, async (req, res) => {
    try {
      // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
      const users = db.query("SELECT * FROM users") as Array<any>;
      const products = db.query("SELECT * FROM products") as Array<any>;
      const orders = db.query("SELECT * FROM orders") as Array<any>;
      
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º CSV –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
      const csvContent = generateStatisticsCSV(users, products, orders);
      
      // –î–æ–±–∞–≤–ª—è–µ–º BOM –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∏—Ä–∏–ª–ª–∏—Ü—ã
      const BOM = '\uFEFF';
      const csvContentWithBOM = BOM + csvContent;
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º CSV —Ñ–∞–π–ª
      res.setHeader('Content-Type', 'text/csv; charset=utf-8');
      res.setHeader('Content-Disposition', 'attachment; filename="statistics.csv"');
      res.send(csvContentWithBOM);
    } catch (error) {
      console.error("Error exporting statistics:", error);
      res.status(500).json({ message: "Failed to export statistics" });
    }
  });

  // –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ Excel
  app.get("/api/export/users", ensureAdmin, async (req, res) => {
    try {
      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
      const users = db.query("SELECT * FROM users") as Array<{
        id: string;
        username: string;
        email: string;
        first_name: string;
        last_name: string;
        phone: string | null;
        address: string | null;
        is_admin: number;
        balance: string | null;
        created_at: string;
      }>;
      
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º CSV –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
      const csvContent = generateUsersCSV(users);
      
      // –î–æ–±–∞–≤–ª—è–µ–º BOM –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∏—Ä–∏–ª–ª–∏—Ü—ã
      const BOM = '\uFEFF';
      const csvContentWithBOM = BOM + csvContent;
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º CSV —Ñ–∞–π–ª
      res.setHeader('Content-Type', 'text/csv; charset=utf-8');
      res.setHeader('Content-Disposition', 'attachment; filename="users.csv"');
      res.send(csvContentWithBOM);
    } catch (error) {
      console.error("Error exporting users:", error);
      res.status(500).json({ message: "Failed to export users" });
    }
  });

  // –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ —Ç–æ–≤–∞—Ä–æ–≤ –≤ Excel
  app.get("/api/export/products", ensureAdmin, async (req, res) => {
    try {
      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã
      const products = db.query("SELECT * FROM products") as Array<{
        id: number;
        name: string;
        description: string;
        price: number;
        original_price: number | null;
        quantity: number;
        category: string;
        is_available: number;
        is_preorder: number;
        is_rare: number;
        is_easy_to_care: number;
        created_at: string;
      }>;
      
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º CSV –¥–ª—è —Ç–æ–≤–∞—Ä–æ–≤
      const csvContent = generateProductsCSV(products);
      
      // –î–æ–±–∞–≤–ª—è–µ–º BOM –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∏—Ä–∏–ª–ª–∏—Ü—ã
      const BOM = '\uFEFF';
      const csvContentWithBOM = BOM + csvContent;
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º CSV —Ñ–∞–π–ª
      res.setHeader('Content-Type', 'text/csv; charset=utf-8');
      res.setHeader('Content-Disposition', 'attachment; filename="products.csv"');
      res.send(csvContentWithBOM);
    } catch (error) {
      console.error("Error exporting products:", error);
      res.status(500).json({ message: "Failed to export products" });
    }
  });

  // –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –∑–∞–∫–∞–∑–æ–≤ –≤ Excel
  app.get("/api/export/orders", ensureAdmin, async (req, res) => {
    try {
      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–∫–∞–∑—ã
      const orders = db.query("SELECT * FROM orders ORDER BY created_at DESC") as Array<{
        id: number;
        user_id: string;
        items: string;
        total_amount: string;
        delivery_amount: string;
        full_name: string;
        phone: string;
        address: string;
        delivery_type: string;
        payment_method: string;
        payment_status: string;
        order_status: string;
        created_at: string;
      }>;
      
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º CSV –¥–ª—è –∑–∞–∫–∞–∑–æ–≤
      const csvContent = generateOrdersCSV(orders);
      
      // –î–æ–±–∞–≤–ª—è–µ–º BOM –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∏—Ä–∏–ª–ª–∏—Ü—ã
      const BOM = '\uFEFF';
      const csvContentWithBOM = BOM + csvContent;
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º CSV —Ñ–∞–π–ª
      res.setHeader('Content-Type', 'text/csv; charset=utf-8');
      res.setHeader('Content-Disposition', 'attachment; filename="orders.csv"');
      res.send(csvContentWithBOM);
    } catch (error) {
      console.error("Error exporting orders:", error);
      res.status(500).json({ message: "Failed to export orders" });
    }
  });

  // Helper function –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞
  function formatOrderForClient(order: any) {
    if (!order) return null;
    
    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º JSON —Å—Ç—Ä–æ–∫—É items –≤ –º–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤
    let items;
    try {
      if (typeof order.items === 'string') {
        items = JSON.parse(order.items);
      } else if (Array.isArray(order.items)) {
        items = order.items;
      } else {
        items = [];
      }
    } catch (e) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ —Å–ø–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤:", e);
      items = [];
    }

    // –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Å—É–º–º—ã –∑–∞–∫–∞–∑–∞
    let totalAmount = "0";
    try {
      if (order.total_amount) {
        totalAmount = String(order.total_amount);
      } else if (order.totalAmount) {
        totalAmount = String(order.totalAmount);
      } else if (items && Array.isArray(items) && items.length > 0) {
        // –í—ã—á–∏—Å–ª—è–µ–º —Å—É–º–º—É –∑–∞–∫–∞–∑–∞ –∏–∑ —Å–ø–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤
        totalAmount = String(items.reduce((sum, item) => {
          const price = parseFloat(String(item.price || 0));
          const quantity = parseInt(String(item.quantity || 1));
          return sum + (price * quantity);
        }, 0));
      }
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—á–∏—Å–ª–µ–Ω–∏–∏ —Å—É–º–º—ã –∑–∞–∫–∞–∑–∞:", error);
    }

    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∑–∞–∫–∞–∑ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞
    return {
      id: order.id,
      userId: order.user_id || order.userId,
      items: items,
      totalAmount: totalAmount,
      deliveryAmount: order.delivery_amount || order.deliveryAmount || "0",
      fullName: order.full_name || order.fullName || "",
      address: order.address || "",
      phone: order.phone || "",
      socialNetwork: order.social_network || order.socialNetwork || null,
      socialUsername: order.social_username || order.socialUsername || null,
      comment: order.comment || "",
      deliveryType: order.delivery_type || order.deliveryType || "cdek",
      deliverySpeed: order.delivery_speed || order.deliverySpeed || 'standard',
      needInsulation: order.need_insulation === 1 || order.needInsulation === true,
      paymentMethod: order.payment_method || order.paymentMethod || "card",
      paymentStatus: order.payment_status || order.paymentStatus || "pending",
      orderStatus: order.order_status || order.orderStatus || "pending",
      paymentProofUrl: order.payment_proof_url ? 
        (order.payment_proof_url.startsWith('http') ? order.payment_proof_url : `${process.env.PUBLIC_URL || ''}${order.payment_proof_url}`) : 
        null,
      adminComment: order.admin_comment || order.adminComment || "",
      createdAt: order.created_at || order.createdAt || new Date().toISOString(),
      updatedAt: order.updated_at || order.updatedAt || null
    };
  }

  // –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã
  app.post("/api/orders/:id/payment-proof", ensureAuthenticated, upload.single("proof"), async (req, res) => {
    try {
      if (!req.file) {
        console.error("[PAYMENT] –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —á–µ–∫–∞: —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω");
        return res.status(400).json({ message: "–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω" });
      }
      
      const id = parseInt(req.params.id);
      const orderId = id.toString();
      
      console.log(`[PAYMENT] –ó–∞–≥—Ä—É–∑–∫–∞ —á–µ–∫–∞ –¥–ª—è –∑–∞–∫–∞–∑–∞ ID=${orderId}, —Ñ–∞–π–ª: ${req.file.filename}`);
      console.log(`[PAYMENT] –ü–æ–ª–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É: ${path.resolve(req.file.path)}`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞
      const order = db.queryOne("SELECT * FROM orders WHERE id = ?", [orderId]);
      if (!order) {
        console.error(`[PAYMENT] –ó–∞–∫–∞–∑ —Å ID=${orderId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
        return res.status(404).json({ message: "–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω" });
      }
      
      // –§–æ—Ä–º–∏—Ä—É–µ–º –ø—É—Ç—å –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∞–π–ª—É - —Å–¥–µ–ª–∞–µ–º –µ–≥–æ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –∫–æ—Ä–Ω—è —Å–∞–π—Ç–∞
      const relativePath = `/uploads/${req.file.filename}`;
      console.log(`[PAYMENT] –û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å –¥–ª—è –≤–µ–±-–¥–æ—Å—Ç—É–ø–∞: ${relativePath}`);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
      db.run(
        "UPDATE orders SET payment_proof_url = ?, payment_status = ?, updated_at = ? WHERE id = ?",
        [relativePath, "pending_verification", new Date().toISOString(), orderId]
      );
      
      console.log(`[PAYMENT] –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —á–µ–∫–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –¥–ª—è –∑–∞–∫–∞–∑–∞ #${orderId}`);
      
      // –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –∑–∞–∫–∞–∑
      const updatedOrder = db.queryOne("SELECT * FROM orders WHERE id = ?", [orderId]);
      
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å –¥–∞–Ω–Ω—ã–º–∏ –∑–∞–∫–∞–∑–∞
      return res.status(200).json({
        success: true,
        message: "–ß–µ–∫ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω",
        order: updatedOrder
      });
    } catch (error) {
      console.error("[PAYMENT] –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —á–µ–∫–∞:", error);
      return res.status(500).json({ 
        success: false,
        message: "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —á–µ–∫–∞",
        error: error instanceof Error ? error.message : String(error)
      });
    }
  });

  // –ù–æ–≤—ã–π –º–∞—Ä—à—Ä—É—Ç –¥–ª—è —Ñ–∏–Ω–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–∞–∫–∞–∑–∞ –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ —á–µ–∫–∞
  app.post("/api/orders/:id/complete", ensureAuthenticated, async (req, res) => {
    try {
      const orderId = req.params.id;
      
      // –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑ –∏–∑ –ë–î —Å —è–≤–Ω–æ–π —Ç–∏–ø–∏–∑–∞—Ü–∏–µ–π
      const order = db.queryOne("SELECT * FROM orders WHERE id = ?", [orderId]) as Record<string, any> | null;
      
      if (!order) {
        return res.status(404).json({ message: "–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω" });
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ —ç—Ç–æ–º—É –∑–∞–∫–∞–∑—É
      const user = req.user as any;
      if (!user.isAdmin && order.user_id !== user.id && order.user_id !== String(user.id)) {
        return res.status(403).json({ message: "–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω" });
      }
      
      // –ï—Å–ª–∏ —á–µ–∫ —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω, –º–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ "–∑–∞–≤–µ—Ä—à–µ–Ω"
      if (order.payment_proof_url) {
        db.run(
          `UPDATE orders SET 
           payment_status = ?, 
           order_status = ?, 
           updated_at = ? 
           WHERE id = ?`,
          ["verification", "pending", new Date().toISOString(), orderId]
        );
        
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –∑–∞–∫–∞–∑
        const updatedOrder = db.queryOne(`SELECT * FROM orders WHERE id = ?`, [orderId]);
        const formattedOrder = formatOrderForClient(updatedOrder);
        
        return res.json({
          success: true,
          message: "–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω –∏ –æ–∂–∏–¥–∞–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–ø–ª–∞—Ç—ã",
          order: formattedOrder
        });
      } else {
        return res.status(400).json({ message: "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã" });
      }
    } catch (error) {
      console.error("Error completing order:", error);
      res.status(500).json({ message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞" });
    }
  });

  // –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –æ–ø–ª–∞—Ç—ã —á–µ—Ä–µ–∑ –±–∞–ª–∞–Ω—Å
  app.post("/api/orders", ensureAuthenticated, async (req, res) => {
    try {
      const orderData = req.body;
      const user = req.user as Express.User;
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ—Å—Å–∏—é –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º –∑–∞–∫–∞–∑–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞
      syncUserSession(req);
      
      // Ensure userId matches authenticated user or admin
      if (String(user.id) !== String(orderData.userId) && !user.isAdmin) {
        return res.status(403).json({ message: "–ù–µ–ª—å–∑—è —Å–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑ –æ—Ç –∏–º–µ–Ω–∏ –¥—Ä—É–≥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è" });
      }
      
      // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –ø–µ—Ä–µ–¥–∞–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –º–∞—Å—Å–∏–≤ —Ç–æ–≤–∞—Ä–æ–≤
      if (!Array.isArray(orderData.items) || orderData.items.length === 0) {
        return res.status(400).json({ message: "–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞ –∏–ª–∏ –∏–º–µ–µ—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç" });
      }
      
      // –ü—Ä–æ–≤–µ—Ä–∏–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ –ø–µ—Ä–µ–¥ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ–º –∑–∞–∫–∞–∑–∞
      for (const item of orderData.items) {
        const product = db.queryOne("SELECT * FROM products WHERE id = ?", [item.id]) as { 
          quantity: number; 
          name: string;
        } | null;
        
        if (!product) {
          return res.status(400).json({ 
            message: `–¢–æ–≤–∞—Ä —Å ID ${item.id} –Ω–µ –Ω–∞–π–¥–µ–Ω` 
          });
        }
        
        if (product.quantity < item.quantity) {
          return res.status(400).json({ 
            message: `–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ "${product.name}" –≤ –Ω–∞–ª–∏—á–∏–∏ (–¥–æ—Å—Ç—É–ø–Ω–æ: ${product.quantity})` 
          });
        }
      }
      
      // –ï—Å–ª–∏ –æ–ø–ª–∞—Ç–∞ —Å –±–∞–ª–∞–Ω—Å–∞, –ø—Ä–æ–≤–µ—Ä—è–µ–º –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å
      if (orderData.paymentMethod === "balance") {
        try {
          // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
          const dbUser = db.queryOne("SELECT * FROM users WHERE id = ?", [user.id]) as {
            balance: string;
            id: string;
            [key: string]: any;
          } | null;
          
          if (!dbUser) {
            return res.status(404).json({ message: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω" });
          }
          
          // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –±–∞–ª–∞–Ω—Å –∏ –æ–±—â—É—é —Å—É–º–º—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
          const currentBalance = parseFloat(dbUser.balance || "0");
          const totalAmount = parseFloat(orderData.totalAmount || "0");
          
          console.log(`–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è –∑–∞–∫–∞–∑–∞: –ë–∞–ª–∞–Ω—Å=${currentBalance}, –°—É–º–º–∞ –∑–∞–∫–∞–∑–∞=${totalAmount}`);
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ —Å—Ä–µ–¥—Å—Ç–≤
          if (currentBalance < totalAmount) {
            return res.status(400).json({ 
              message: "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ", 
              currentBalance, 
              totalAmount
            });
          }
          
          // –°–ø–∏—Å—ã–≤–∞–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞ —Å –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
          const newBalance = (currentBalance - totalAmount).toFixed(2);
          db.run(
            "UPDATE users SET balance = ? WHERE id = ?", 
            [newBalance, user.id]
          );
          
          console.log(`–ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id} –æ–±–Ω–æ–≤–ª–µ–Ω –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –∑–∞–∫–∞–∑–∞: ${currentBalance} ‚Üí ${newBalance}`);
          
          // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –≤ —Å–µ—Å—Å–∏–∏
          user.balance = newBalance;
          
          // –°–ø–∏—Å—ã–≤–∞–µ–º —Ç–æ–≤–∞—Ä—ã —Å –±–∞–ª–∞–Ω—Å–∞ —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã
          console.log("–ù–∞—á–∏–Ω–∞–µ–º —Å–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã —Å –±–∞–ª–∞–Ω—Å–∞:");
          for (const item of orderData.items) {
            const product = db.queryOne("SELECT * FROM products WHERE id = ?", [item.id]) as {
              quantity: number;
              name: string;
              id: number;
            } | null;
            
            if (product) {
              const newQuantity = Math.max(0, product.quantity - item.quantity);
              db.run(
                "UPDATE products SET quantity = ? WHERE id = ?",
                [newQuantity, item.id]
              );
              console.log(`–°–ø–∏—Å–∞–Ω–æ ${item.quantity} –µ–¥–∏–Ω–∏—Ü —Ç–æ–≤–∞—Ä–∞ "${product.name}" (ID: ${product.id}), –Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${newQuantity}`);
            }
          }
        } catch (error) {
          console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –±–∞–ª–∞–Ω—Å–∞:", error);
          return res.status(500).json({ message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –±–∞–ª–∞–Ω—Å–∞" });
        }
      }
      
      // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ SQLite
      const orderToSave = {
        user_id: orderData.userId,
        items: JSON.stringify(orderData.items),
        total_amount: orderData.totalAmount,
        delivery_amount: orderData.deliveryAmount,
        full_name: orderData.fullName,
        address: orderData.address,
        phone: orderData.phone,
        social_network: orderData.socialNetwork || null,
        social_username: orderData.socialUsername || null,
        comment: orderData.comment || null,
        need_insulation: orderData.needInsulation ? 1 : 0,
        delivery_type: orderData.deliveryType,
        delivery_speed: orderData.deliverySpeed || null,
        payment_method: orderData.paymentMethod,
        payment_status: orderData.paymentMethod === "balance" ? "completed" : "pending",
        order_status: orderData.paymentMethod === "balance" ? "processing" : "pending",
        payment_proof_url: null,
        admin_comment: null,
        created_at: new Date().toISOString(),
        updated_at: new Date().toISOString()
      };
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–∫–∞–∑ –≤ –ë–î
      const result = db.run(
        `INSERT INTO orders (
          user_id, items, total_amount, delivery_amount, full_name, 
          address, phone, social_network, social_username, comment,
          need_insulation, delivery_type, delivery_speed,
          payment_method, payment_status, order_status,
          payment_proof_url, admin_comment, created_at, updated_at
        ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)`,
        [
          orderToSave.user_id,
          orderToSave.items,
          orderToSave.total_amount,
          orderToSave.delivery_amount,
          orderToSave.full_name,
          orderToSave.address,
          orderToSave.phone,
          orderToSave.social_network,
          orderToSave.social_username,
          orderToSave.comment,
          orderToSave.need_insulation,
          orderToSave.delivery_type,
          orderToSave.delivery_speed,
          orderToSave.payment_method,
          orderToSave.payment_status,
          orderToSave.order_status,
          orderToSave.payment_proof_url,
          orderToSave.admin_comment,
          orderToSave.created_at,
          orderToSave.updated_at
        ]
      );
      
      // –ü–æ–ª—É—á–∞–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–π –∑–∞–∫–∞–∑
      const orderId = result.lastInsertRowid;
      const createdOrder = db.queryOne("SELECT * FROM orders WHERE id = ?", [orderId]);
      
      if (!createdOrder) {
        return res.status(500).json({ message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞" });
      }
      
      // –ï—Å–ª–∏ –∑–∞–∫–∞–∑ —Å –ø—Ä—è–º–æ–π –æ–ø–ª–∞—Ç–æ–π (–Ω–µ —á–µ—Ä–µ–∑ –±–∞–ª–∞–Ω—Å) –∏ —Å—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω, —É–º–µ–Ω—å—à–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤
      if (orderData.paymentMethod !== "balance" && orderData.paymentProof) {
        console.log("–ù–∞—á–∏–Ω–∞–µ–º —Å–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –∑–∞–∫–∞–∑–∞ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω–æ–π –æ–ø–ª–∞—Ç–æ–π:");
        for (const item of orderData.items) {
          const product = db.queryOne("SELECT * FROM products WHERE id = ?", [item.id]) as {
            quantity: number;
            name: string;
          } | null;
          
          if (product) {
            const newQuantity = Math.max(0, product.quantity - item.quantity);
            db.run(
              "UPDATE products SET quantity = ? WHERE id = ?",
              [newQuantity, item.id]
            );
            console.log(`–°–ø–∏—Å–∞–Ω–æ ${item.quantity} –µ–¥–∏–Ω–∏—Ü —Ç–æ–≤–∞—Ä–∞ "${product.name}" (ID: ${item.id}), –Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${newQuantity}`);
          }
        }
      }
      
      // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∑–∞–∫–∞–∑ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞
      const formattedOrder = formatOrderForClient(createdOrder);
      
      res.json({
        ...formattedOrder,
        message: orderData.paymentMethod === "balance" 
          ? "–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ–ø–ª–∞—á–µ–Ω —Å –≤–∞—à–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞" 
          : (orderData.paymentMethod === "yoomoney" 
            ? "–ó–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω. –û–∂–∏–¥–∞–µ—Ç—Å—è –æ–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ –Æ–ú–∞–Ω–∏"
            : "–ó–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω. –û–∂–∏–¥–∞–µ—Ç—Å—è –∑–∞–≥—Ä—É–∑–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã")
      });
    } catch (error) {
      console.error("Error creating order:", error);
      res.status(400).json({
        message: "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑",
        error: error instanceof Error ? error.message : String(error)
      });
    }
  });

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤ (–¥–ª—è –∞–¥–º–∏–Ω–∫–∏)
  app.get("/api/orders", ensureAuthenticated, async (req: Request, res: Response) => {
    try {
      let orders: Record<string, any>[];
      
      // TypeScript type assertion for user
      const user = req.user as Express.User;
      
      if (user.isAdmin) {
        // Admin gets all orders
        orders = db.query("SELECT * FROM orders ORDER BY created_at DESC") as Record<string, any>[];
      } else {
        // Regular users get only their orders
        orders = db.query("SELECT * FROM orders WHERE user_id = ? ORDER BY created_at DESC", [user.id]) as Record<string, any>[];
      }
      
      // Enrich orders with product information
      const enrichedOrders = await Promise.all(orders.map(async (order) => {
        try {
          // Parse items from JSON string
          const items = JSON.parse(order.items || '[]');
          
          // Ensure we have product details for each item
          const enrichedItems = await Promise.all(items.map(async (item: any) => {
            // Fetch product details for each order item
            const product = db.queryOne("SELECT * FROM products WHERE id = ?", [item.id]) as {
              id: number;
              name: string;
              images: string;
              [key: string]: any;
            } | null;
            
            if (product) {
              const productImages = product.images ? JSON.parse(product.images) : [];
              const imageUrl = productImages && productImages.length > 0 ? productImages[0] : null;
              
              return {
                ...item, 
                productName: product.name, 
                productImage: imageUrl
              };
            }
            return item;
          }));
          
          return {
            ...order,
            items: enrichedItems
          };
        } catch (error) {
          console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–∫–∞–∑–∞ #${order.id}:`, error);
          return order;
        }
      }));
      
      res.json(enrichedOrders);
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∑–∞–∫–∞–∑–æ–≤:", error);
      res.status(500).json({ message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∑–∞–∫–∞–∑–æ–≤" });
    }
  });
  
  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞
  app.get("/api/orders/:id", ensureAuthenticated, async (req, res) => {
    try {
      const orderId = req.params.id;
      
      // TypeScript type assertion for user
      const user = req.user as Express.User;
      
      let order: Record<string, any> | null;
      
      if (user.isAdmin) {
        // Admin can view any order
        order = db.queryOne("SELECT * FROM orders WHERE id = ?", [orderId]) as Record<string, any> | null;
      } else {
        // Users can only view their own orders
        order = db.queryOne("SELECT * FROM orders WHERE id = ? AND user_id = ?", [orderId, user.id]) as Record<string, any> | null;
      }
      
      if (!order) {
        return res.status(404).json({ message: "–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω" });
      }
      
      // Parse and enrich items
      try {
        const items = JSON.parse(order.items || "[]");
        
        // Enrich each item with product details
        const enrichedItems = await Promise.all(items.map(async (item: any) => {
          // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ç–æ–≤–∞—Ä–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
          const product = db.queryOne("SELECT * FROM products WHERE id = ?", [item.id]) as {
            id: number;
            name: string;
            images: string;
            price: number;
            [key: string]: any;
          } | null;
          
          if (product) {
            const productImages = product.images ? JSON.parse(product.images) : [];
            const imageUrl = productImages && productImages.length > 0 ? productImages[0] : null;
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ç–æ–≤–∞—Ä–µ –≤ –∑–∞–∫–∞–∑–µ
            return {
              ...item,
              productName: product.name,
              productImage: imageUrl,
              price: item.price || product.price
            };
          }
          return item;
        }));
        
        // –û–±–Ω–æ–≤–ª—è–µ–º items –≤ –∑–∞–∫–∞–∑–µ
        order.items = enrichedItems;
      } catch (error) {
        console.error(`Error processing order ${order.id} items:`, error);
      }
      
      res.json(order);
    } catch (error) {
      console.error("Error fetching order:", error);
      res.status(500).json({ message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–∞" });
    }
  });

  // –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–∞
  app.put("/api/orders/:id", ensureAuthenticated, ensureAdmin, async (req, res) => {
    try {
      const orderId = req.params.id;
      const { orderStatus, adminComment } = req.body;
      
      console.log(`[ORDERS] –ó–∞–ø—Ä–æ—Å –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞ #${orderId}:`, req.body);
      
      // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –∑–∞–∫–∞–∑
      const orderQuery = "SELECT * FROM orders WHERE id = ?";
      const currentOrder = db.queryOne(orderQuery, [orderId]) as Record<string, any>;
      
      if (!currentOrder) {
        return res.status(404).json({ message: "–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω" });
      }
      
      const prevStatus = currentOrder.order_status || 'unknown';
      console.log(`[ORDERS] –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ #${orderId}: ${prevStatus}`);
      
      // –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π –æ–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å —Ç–∏–ø–∏–∑–∞—Ü–∏–µ–π
      const updateData: Record<string, any> = {};
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –µ—Å–ª–∏ –æ–Ω –ø–µ—Ä–µ–¥–∞–Ω
      if (orderStatus) {
        updateData.order_status = orderStatus;
        console.log(`[ORDERS] –ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞: ${orderStatus}`);
      }
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –µ—Å–ª–∏ –æ–Ω –ø–µ—Ä–µ–¥–∞–Ω
      if (adminComment !== undefined) {
        updateData.admin_comment = adminComment;
        console.log(`[ORDERS] –û–±–Ω–æ–≤–ª–µ–Ω –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∞–¥–º–∏–Ω–∞`);
      }
      
      // –î–æ–±–∞–≤–ª—è–µ–º –¥–∞—Ç—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
      updateData.updated_at = new Date().toISOString();
      
      // –§–æ—Ä–º–∏—Ä—É–µ–º SQL –∑–∞–ø—Ä–æ—Å –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
      const fields = Object.keys(updateData).map(key => `${key} = ?`).join(", ");
      const values = Object.values(updateData);
      values.push(orderId); // –î–æ–±–∞–≤–ª—è–µ–º ID –¥–ª—è WHERE
      
      // –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
      db.run(`UPDATE orders SET ${fields} WHERE id = ?`, values);
      
      // –ï—Å–ª–∏ –∑–∞–∫–∞–∑ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –≤ —Å—Ç–∞—Ç—É—Å "–æ–ø–ª–∞—á–µ–Ω" –∏–ª–∏ "–≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ", —É–º–µ–Ω—å—à–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤
      if (orderStatus && 
          (orderStatus === "paid" || orderStatus === "processing") &&
          prevStatus !== "paid" && 
          prevStatus !== "processing") {
        
        console.log(`[ORDERS] –ó–∞–∫–∞–∑ #${orderId} –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –≤ —Å—Ç–∞—Ç—É—Å ${orderStatus}, —Ç—Ä–µ–±—É–µ—Ç—Å—è —Å–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤`);
        
        try {
          // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä—ã –∏–∑ –∑–∞–∫–∞–∑–∞
          let items = [];
          
          try {
            // –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ JSON
            const itemsData = String(currentOrder?.items || "[]").trim();
            
            if (itemsData) {
              // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞ —É–∂–µ –º–∞—Å—Å–∏–≤–æ–º (–Ω–µ —Å—Ç—Ä–æ–∫–æ–π JSON)
              if (Array.isArray(currentOrder?.items)) {
                console.log(`[ORDERS] –î–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–æ–≤ —É–∂–µ —è–≤–ª—è—é—Ç—Å—è –º–∞—Å—Å–∏–≤–æ–º`);
                items = currentOrder.items;
              } else {
                // –ü—Ä–æ–±—É–µ–º —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON
                try {
                  items = JSON.parse(itemsData);
                  
                  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç - –º–∞—Å—Å–∏–≤
                  if (!Array.isArray(items)) {
                    console.error(`[ORDERS] –î–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ—Å–ª–µ –ø–∞—Ä—Å–∏–Ω–≥–∞ –Ω–µ —è–≤–ª—è—é—Ç—Å—è –º–∞—Å—Å–∏–≤–æ–º:`, items);
                    items = [];
                  }
                } catch (parseError) {
                  console.error(`[ORDERS] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ —Ç–æ–≤–∞—Ä–æ–≤:`, parseError, "–î–∞–Ω–Ω—ã–µ:", itemsData);
                  
                  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–ª—É—á–∞–π –¥–≤–æ–π–Ω–æ–≥–æ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è JSON
                  if (itemsData.startsWith('"[') && itemsData.endsWith(']"')) {
                    try {
                      const unescaped = JSON.parse(itemsData);
                      items = JSON.parse(unescaped);
                      console.log(`[ORDERS] –£—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω—ã –≤–ª–æ–∂–µ–Ω–Ω—ã–µ JSON-–¥–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–æ–≤`);
                    } catch (nestedError) {
                      console.error(`[ORDERS] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –≤–ª–æ–∂–µ–Ω–Ω–æ–≥–æ JSON:`, nestedError);
                      items = [];
                    }
                  } else {
                    items = [];
                  }
                }
              }
            }
            
            console.log(`[ORDERS] –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–æ–≤:`, items.length > 0 ? `${items.length} –ø–æ–∑–∏—Ü–∏–π` : "–Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤");
          } catch (error) {
            console.error(`[ORDERS] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–æ–≤–∞—Ä–æ–≤:`, error);
            items = [];
          }
          
          // –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —Å–ø–∏—Å–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤
          if (items.length > 0) {
            updateProductQuantities(orderId, items);
          } else {
            console.warn(`[ORDERS] –ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è —Å–ø–∏—Å–∞–Ω–∏—è –≤ –∑–∞–∫–∞–∑–µ #${orderId}`);
          }
        } catch (error) {
          console.error(`[ORDERS] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–ø–∏—Å–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤:`, error);
        }
      }
      
      // –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –∑–∞–∫–∞–∑
      const updatedOrder = db.queryOne("SELECT * FROM orders WHERE id = ?", [orderId]);
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç
      return res.status(200).json({
        success: true,
        message: "–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω",
        order: updatedOrder
      });
    } catch (error) {
      console.error(`[ORDERS] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞:`, error);
      return res.status(500).json({ 
        success: false,
        message: "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞",
        error: error instanceof Error ? error.message : String(error)
      });
    }
  });

  // –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
  app.delete("/api/orders/:id", ensureAuthenticated, ensureAdmin, async (req: Request, res: Response) => {
    try {
      const orderId = req.params.id;
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∑–∞–∫–∞–∑–∞
      const order = db.queryOne("SELECT * FROM orders WHERE id = ?", [orderId]);
      if (!order) {
        return res.status(404).json({ message: `–ó–∞–∫–∞–∑ #${orderId} –Ω–µ –Ω–∞–π–¥–µ–Ω` });
      }
      
      // –£–¥–∞–ª—è–µ–º –∑–∞–∫–∞–∑
      db.run("DELETE FROM orders WHERE id = ?", [orderId]);
      console.log(`–ó–∞–∫–∞–∑ #${orderId} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω`);
      
      res.json({ success: true, message: `–ó–∞–∫–∞–∑ #${orderId} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω` });
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞:", error);
      res.status(500).json({ message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞" });
    }
  });

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  app.put("/api/users/:id", ensureAuthenticated, async (req, res) => {
    try {
      const userId = req.params.id;
      const user = req.user as Express.User;
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞: —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã –∏–ª–∏ —Å–∞–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–≥—É—Ç –æ–±–Ω–æ–≤–ª—è—Ç—å –ø—Ä–æ—Ñ–∏–ª—å
      const isOwnProfile = String(user.id) === String(userId);
      if (!isOwnProfile && !user.isAdmin) {
        return res.status(403).json({ message: "–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω" });
      }
      
      // –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã –º–æ–≥—É—Ç –º–µ–Ω—è—Ç—å —Å—Ç–∞—Ç—É—Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏ –±–∞–ª–∞–Ω—Å
      if (!user.isAdmin) {
        delete req.body.is_admin;
        delete req.body.isAdmin;
        delete req.body.balance;
      }
      
      // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const existingUser = db.queryOne("SELECT * FROM users WHERE id = ?", [userId]) as UserRecord | null;
      if (!existingUser) {
        return res.status(404).json({ message: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω" });
      }
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–º–µ–Ω—É –ø–∞—Ä–æ–ª—è
      if (req.body.password && !user.isAdmin) {
        if (!req.body.oldPassword) {
          return res.status(400).json({ message: "–¢—Ä–µ–±—É–µ—Ç—Å—è —Ç–µ–∫—É—â–∏–π –ø–∞—Ä–æ–ª—å" });
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π –ø–∞—Ä–æ–ª—å
        const currentPasswordValid = verifyPassword(req.body.oldPassword, existingUser.password);
        if (!currentPasswordValid) {
          return res.status(400).json({ message: "–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–µ–∫—É—â–∏–π –ø–∞—Ä–æ–ª—å" });
        }
        
        // –•–µ—à–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å
        req.body.password = hashPassword(req.body.password);
      }
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å email –ø—Ä–∏ –µ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏–∏
      if (req.body.email && req.body.email !== existingUser.email) {
        const emailExists = db.queryOne("SELECT * FROM users WHERE email = ? AND id != ?", [
          req.body.email.toLowerCase(), userId
        ]);
        
        if (emailExists) {
          return res.status(400).json({ message: "Email —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º" });
        }
      }
      
      // –§–æ—Ä–º–∏—Ä—É–µ–º SQL –∑–∞–ø—Ä–æ—Å –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
      const updateFields = [];
      const updateValues = [];
      
      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ –ø–æ–ª—è
      if (req.body.email) {
        updateFields.push("email = ?");
        updateValues.push(req.body.email.toLowerCase());
      }
      
      if (req.body.fullName) {
        const nameParts = req.body.fullName.trim().split(" ");
        updateFields.push("first_name = ?");
        updateValues.push(nameParts[0] || "");
        
        updateFields.push("last_name = ?");
        updateValues.push(nameParts.slice(1).join(" ") || "");
      }
      
      if (req.body.phone) {
        updateFields.push("phone = ?");
        updateValues.push(req.body.phone);
      }
      
      if (req.body.address) {
        updateFields.push("address = ?");
        updateValues.push(req.body.address);
      }
      
      if (req.body.username) {
        updateFields.push("username = ?");
        updateValues.push(req.body.username);
      }
      
      if (req.body.password) {
        updateFields.push("password = ?");
        updateValues.push(req.body.password);
      }
      
      if (user.isAdmin && req.body.isAdmin !== undefined) {
        updateFields.push("is_admin = ?");
        updateValues.push(req.body.isAdmin ? 1 : 0);
      }
      
      if (user.isAdmin && req.body.balance !== undefined) {
        updateFields.push("balance = ?");
        updateValues.push(req.body.balance.toString());
      }
      
      // –î–æ–±–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞—Ç—ã
      updateFields.push("updated_at = ?");
      updateValues.push(new Date().toISOString());
      
      // ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è WHERE
      updateValues.push(userId);
      
      // –ï—Å–ª–∏ –µ—Å—Ç—å –ø–æ–ª—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
      if (updateFields.length > 0) {
        const updateQuery = `UPDATE users SET ${updateFields.join(", ")} WHERE id = ?`;
        db.run(updateQuery, updateValues);
      }
      
      // –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const updatedUser = db.queryOne("SELECT * FROM users WHERE id = ?", [userId]) as UserRecord;
      
      if (!updatedUser) {
        return res.status(404).json({ message: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è" });
      }
      
      // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
      const formattedUser = {
        id: updatedUser.id,
        email: updatedUser.email,
        username: updatedUser.username || updatedUser.email,
        fullName: `${updatedUser.first_name || ''} ${updatedUser.last_name || ''}`.trim(),
        firstName: updatedUser.first_name,
        lastName: updatedUser.last_name,
        phone: updatedUser.phone || '',
        address: updatedUser.address || '',
        isAdmin: !!updatedUser.is_admin,
        balance: updatedUser.balance || '0'
      };
      
      // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–±–Ω–æ–≤–ª—è–ª —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å, –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–µ—Å—Å–∏–∏
      if (isOwnProfile) {
        // –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—ä–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–µ–∞–Ω—Å–µ
        Object.assign(user, {
          email: formattedUser.email,
          firstName: formattedUser.firstName,
          lastName: formattedUser.lastName,
          fullName: formattedUser.fullName,
          phone: formattedUser.phone,
          address: formattedUser.address,
          isAdmin: formattedUser.isAdmin,
          balance: formattedUser.balance
        });
        
        console.log("–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–µ—Å—Å–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã:", user.email);
      }
      
      res.json(formattedUser);
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è:", error);
      res.status(500).json({ message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è" });
    }
  });

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–ø–∏—Å–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ –∑–∞–∫–∞–∑–∞
  async function updateProductQuantities(orderId: string, items: any[]): Promise<boolean> {
    console.log(`[ORDERS] –°–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –∑–∞–∫–∞–∑–∞ #${orderId}`);
    
    if (!orderId) {
      console.error(`[ORDERS] –û—à–∏–±–∫–∞: –ù–µ —É–∫–∞–∑–∞–Ω ID –∑–∞–∫–∞–∑–∞ –¥–ª—è —Å–ø–∏—Å–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤`);
      return false;
    }
    
    if (!Array.isArray(items) || items.length === 0) {
      console.log(`[ORDERS] –ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è —Å–ø–∏—Å–∞–Ω–∏—è –≤ –∑–∞–∫–∞–∑–µ #${orderId}`);
      return false;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∫–æ–ª–æ–Ω–∫–∞ product_quantities_reduced
    try {
      const tableInfo = db.query("PRAGMA table_info(orders)");
      const hasColumn = tableInfo.some((col: any) => col.name === 'product_quantities_reduced');
      
      if (!hasColumn) {
        // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        console.log(`[ORDERS] –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏ product_quantities_reduced –≤ —Ç–∞–±–ª–∏—Ü—É orders`);
        try {
          db.exec("ALTER TABLE orders ADD COLUMN product_quantities_reduced INTEGER DEFAULT 0");
        } catch (e) {
          console.error(`[ORDERS] –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–æ–ª–æ–Ω–∫–∏:`, e);
          // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É –¥–∞–∂–µ –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–ª–æ–Ω–∫—É
        }
      }
    } catch (schemaError) {
      console.error(`[ORDERS] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ö–µ–º—ã:`, schemaError);
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å–ø–∏—Å–∞–Ω—ã –ª–∏ —É–∂–µ —Ç–æ–≤–∞—Ä—ã –¥–ª—è —ç—Ç–æ–≥–æ –∑–∞–∫–∞–∑–∞
    try {
      const orderRecord = db.queryOne(
        "SELECT * FROM orders WHERE id = ?", 
        [orderId]
      ) as Record<string, any> | null;
      
      if (orderRecord && 
          typeof orderRecord === 'object' && 
          'product_quantities_reduced' in orderRecord && 
          orderRecord.product_quantities_reduced === 1) {
        console.log(`[ORDERS] –¢–æ–≤–∞—Ä—ã –¥–ª—è –∑–∞–∫–∞–∑–∞ #${orderId} —É–∂–µ –±—ã–ª–∏ —Å–ø–∏—Å–∞–Ω—ã —Ä–∞–Ω–µ–µ`);
        return true; // –°—á–∏—Ç–∞–µ–º —É—Å–ø–µ—à–Ω—ã–º, —Ç–∞–∫ –∫–∞–∫ —Ç–æ–≤–∞—Ä—ã —É–∂–µ —Å–ø–∏—Å–∞–Ω—ã
      }
    } catch (checkError) {
      console.error(`[ORDERS] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–ø–∏—Å–∞–Ω–∏—è:`, checkError);
      // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º, —Ç–∞–∫ –∫–∞–∫ –ª—É—á—à–µ –ø–æ–ø—ã—Ç–∞—Ç—å—Å—è —Å–ø–∏—Å–∞—Ç—å —Ç–æ–≤–∞—Ä—ã, —á–µ–º –Ω–µ —Å–ø–∏—Å–∞—Ç—å
    }
    
    console.log(`[ORDERS] –ù–∞—á–∏–Ω–∞–µ–º —Å–ø–∏—Å–∞–Ω–∏–µ ${items.length} —Ç–æ–≤–∞—Ä–æ–≤`);
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–∏—Å–∞–Ω–∏—è –≤ –æ–¥–Ω–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    try {
      // –ù–∞—á–∏–Ω–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
      db.exec("BEGIN TRANSACTION");
      let success = true;
      
      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π —Ç–æ–≤–∞—Ä
      for (const item of items) {
        try {
          if (!item || typeof item !== 'object') {
            console.warn(`[ORDERS] –ü—Ä–æ–ø—É—Å–∫ –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞:`, item);
            continue;
          }
          
          // –ü–æ–ª—É—á–∞–µ–º ID —Ç–æ–≤–∞—Ä–∞
          const productId = item.id ? String(item.id) : null;
          if (!productId) {
            console.warn(`[ORDERS] –¢–æ–≤–∞—Ä –±–µ–∑ ID:`, item);
            continue;
          }
          
          // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è —Å–ø–∏—Å–∞–Ω–∏—è
          let quantity = 0;
          try {
            quantity = parseInt(String(item.quantity || 0));
            if (isNaN(quantity) || quantity <= 0) {
              console.warn(`[ORDERS] –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞:`, item);
              continue;
            }
          } catch (quantityError) {
            console.error(`[ORDERS] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞:`, quantityError);
            continue;
          }
          
          // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ç–æ–≤–∞—Ä
          const product = db.queryOne(
            "SELECT id, name, quantity FROM products WHERE id = ?", 
            [productId]
          ) as Record<string, any> | null;
          
          if (!product) {
            console.warn(`[ORDERS] –¢–æ–≤–∞—Ä —Å ID=${productId} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ`);
            continue;
          }
          
          // –¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞
          let currentQuantity = 0;
          try {
            currentQuantity = parseInt(String(product.quantity || 0));
            if (isNaN(currentQuantity)) currentQuantity = 0;
          } catch (parseError) {
            console.error(`[ORDERS] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ —Ç–µ–∫—É—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞:`, parseError);
            currentQuantity = 0;
          }
          
          // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ (–Ω–µ –º–µ–Ω—å—à–µ –Ω—É–ª—è)
          const newQuantity = Math.max(0, currentQuantity - quantity);
          console.log(`[ORDERS] –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞ "${product.name}" (ID=${productId}): ${currentQuantity} ‚Üí ${newQuantity}`);
          
          // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞
          try {
            const updateResult = db.run(
              "UPDATE products SET quantity = ? WHERE id = ?",
              [newQuantity, productId]
            );
            
            if (!updateResult || updateResult.changes === 0) {
              console.error(`[ORDERS] –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ ID=${productId}`);
              success = false;
            }
          } catch (updateError) {
            console.error(`[ORDERS] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞:`, updateError);
            success = false;
          }
        } catch (itemError) {
          console.error(`[ORDERS] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–æ–≤–∞—Ä–∞:`, itemError);
          success = false;
        }
      }
      
      // –ï—Å–ª–∏ –≤—Å–µ —Ç–æ–≤–∞—Ä—ã –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ, –ø–æ–º–µ—á–∞–µ–º –∑–∞–∫–∞–∑
      if (success) {
        try {
          // –ü–æ–º–µ—á–∞–µ–º –∑–∞–∫–∞–∑ –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π
          const markResult = db.run(
            "UPDATE orders SET product_quantities_reduced = 1 WHERE id = ?",
            [orderId]
          );
          
          if (!markResult || markResult.changes === 0) {
            console.warn(`[ORDERS] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–º–µ—Ç–∏—Ç—å –∑–∞–∫–∞–∑ #${orderId} –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π`);
          }
          
          // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
          db.exec("COMMIT");
          console.log(`[ORDERS] –¢–æ–≤–∞—Ä—ã —É—Å–ø–µ—à–Ω–æ —Å–ø–∏—Å–∞–Ω—ã –¥–ª—è –∑–∞–∫–∞–∑–∞ #${orderId}`);
          return true;
        } catch (markError) {
          console.error(`[ORDERS] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞:`, markError);
          db.exec("ROLLBACK");
          return false;
        }
      } else {
        // –ü—Ä–∏ –æ—à–∏–±–∫–∞—Ö –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–æ–≤–∞—Ä–æ–≤ –æ—Ç–º–µ–Ω—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
        console.error(`[ORDERS] –û—à–∏–±–∫–∏ –ø—Ä–∏ —Å–ø–∏—Å–∞–Ω–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤, –æ—Ç–º–µ–Ω–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏`);
        db.exec("ROLLBACK");
        return false;
      }
    } catch (transactionError) {
      console.error(`[ORDERS] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:`, transactionError);
      try {
        db.exec("ROLLBACK");
      } catch (rollbackError) {
        console.error(`[ORDERS] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:`, rollbackError);
      }
      return false;
    }
  }

  // –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞
  app.put("/api/orders/:id/status", ensureAuthenticated, ensureAdmin, async (req, res) => {
    try {
      const orderId = req.params.id;
      const { orderStatus } = req.body;
      
      if (!orderStatus) {
        return res.status(400).json({ message: "–ù–µ —É–∫–∞–∑–∞–Ω –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞" });
      }
      
      console.log(`[ORDERS] –ó–∞–ø—Ä–æ—Å –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞ #${orderId} –Ω–∞ ${orderStatus}`);
      
      // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –∑–∞–∫–∞–∑
      const currentOrder = db.queryOne(
        "SELECT * FROM orders WHERE id = ?",
        [orderId]
      ) as Record<string, any> | null;
      
      if (!currentOrder) {
        console.error(`[ORDERS] –ó–∞–∫–∞–∑ #${orderId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
        return res.status(404).json({ message: "–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω" });
      }
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Å—Ç–∞—Ç—É—Å
      const previousStatus = currentOrder.order_status || "pending";
      
      console.log(`[ORDERS] –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞ #${orderId}: ${previousStatus} -> ${orderStatus}`);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
      db.run(
        "UPDATE orders SET order_status = ?, updated_at = ? WHERE id = ?",
        [orderStatus, new Date().toISOString(), orderId]
      );
      
      // –ï—Å–ª–∏ –∑–∞–∫–∞–∑ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –≤ —Å—Ç–∞—Ç—É—Å "–æ–ø–ª–∞—á–µ–Ω" –∏–ª–∏ "–≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ", —É–º–µ–Ω—å—à–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤
      if ((orderStatus === "paid" || orderStatus === "processing") &&
          (previousStatus !== "paid" && previousStatus !== "processing")) {
        
        console.log(`[ORDERS] –ó–∞–∫–∞–∑ #${orderId} –ø–µ—Ä–µ–≤–µ–¥–µ–Ω –≤ —Å—Ç–∞—Ç—É—Å ${orderStatus}, —Ç—Ä–µ–±—É–µ—Ç—Å—è —Å–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤`);
        
        try {
          // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä—ã –∏–∑ –∑–∞–∫–∞–∑–∞
          let items: any[] = [];
          
          try {
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ items
            if (typeof currentOrder.items === 'string') {
              // –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ JSON
              const itemsText = String(currentOrder.items || "[]").trim();
              
              if (itemsText) {
                if (itemsText.startsWith('[') && itemsText.endsWith(']')) {
                  // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π JSON –º–∞—Å—Å–∏–≤
                  items = JSON.parse(itemsText);
                } else if (itemsText.startsWith('"[') && itemsText.endsWith(']"')) {
                  // –°–ª—É—á–∞–π –¥–≤–æ–π–Ω–æ–π —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏
                  const unescaped = JSON.parse(itemsText);
                  items = JSON.parse(unescaped);
                } else {
                  console.error(`[ORDERS] –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç items: ${itemsText.substring(0, 50)}...`);
                }
              }
            } else if (Array.isArray(currentOrder.items)) {
              // –ï—Å–ª–∏ items —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è –º–∞—Å—Å–∏–≤–æ–º
              items = currentOrder.items;
            }
          } catch (parseError) {
            console.error(`[ORDERS] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ —Ç–æ–≤–∞—Ä–æ–≤:`, parseError);
            
            // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞, —Å–æ–∑–¥–∞–µ–º –∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç —Å –æ–¥–Ω–∏–º —Ç–æ–≤–∞—Ä–æ–º
            if (currentOrder.total_amount) {
              items = [{
                id: 0, // –§–∏–∫—Ç–∏–≤–Ω—ã–π ID
                quantity: 1,
                price: currentOrder.total_amount
              }];
              console.log(`[ORDERS] –°–æ–∑–¥–∞–Ω –∑–∞–ø–∞—Å–Ω–æ–π —ç–ª–µ–º–µ–Ω—Ç –∑–∞–∫–∞–∑–∞ –Ω–∞ —Å—É–º–º—É ${currentOrder.total_amount}`);
            }
          }
          
          if (items.length === 0) {
            console.log(`[ORDERS] –ó–∞–∫–∞–∑ #${orderId} –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è —Å–ø–∏—Å–∞–Ω–∏—è`);
          } else {
            // –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —Å–ø–∏—Å–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤
            const success = await updateProductQuantities(orderId, items);
            
            if (success) {
              console.log(`[ORDERS] –¢–æ–≤–∞—Ä—ã —É—Å–ø–µ—à–Ω–æ —Å–ø–∏—Å–∞–Ω—ã –¥–ª—è –∑–∞–∫–∞–∑–∞ #${orderId}`);
            } else {
              console.error(`[ORDERS] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–ø–∏—Å–∞–Ω–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –∑–∞–∫–∞–∑–∞ #${orderId}`);
            }
          }
        } catch (productError) {
          console.error(`[ORDERS] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–ø–∏—Å–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤:`, productError);
          // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ —Å–ø–∏—Å–∞–Ω–∏—è
        }
      } else {
        console.log(`[ORDERS] –ó–∞–∫–∞–∑ #${orderId} –Ω–µ —Ç—Ä–µ–±—É–µ—Ç —Å–ø–∏—Å–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ ${previousStatus} -> ${orderStatus}`);
      }
      
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –∑–∞–∫–∞–∑
      const updatedOrder = db.queryOne("SELECT * FROM orders WHERE id = ?", [orderId]);
      return res.json({ 
        success: true, 
        message: "–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω", 
        order: formatOrderForClient(updatedOrder) 
      });
      
    } catch (error) {
      console.error(`[ORDERS] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞:`, error);
      res.status(500).json({
        success: false,
        message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞",
        error: error instanceof Error ? error.message : String(error)
      });
    }
  });

  // –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  app.get("/api/user/orders", ensureAuthenticated, async (req, res) => {
    try {
      const user = req.user as any;
      
      // –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
      const orders = db.query(
        "SELECT * FROM orders WHERE user_id = ? ORDER BY created_at DESC", 
        [user.id]
      ) as Array<Record<string, any>>;
      
      // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∑–∞–∫–∞–∑—ã –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞
      const formattedOrders = orders.map(order => formatOrderForClient(order));
      
      res.json(formattedOrders);
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", error);
      res.status(500).json({ 
        message: "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∑–∞–∫–∞–∑—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
        error: error instanceof Error ? error.message : String(error)
      });
    }
  });
  
  // –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–∑—ã–≤–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  app.get("/api/user/reviews", ensureAuthenticated, async (req, res) => {
    try {
      const user = req.user as any;
      
      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –æ—Ç–∑—ã–≤—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
      const reviews = db.query(
        "SELECT * FROM reviews WHERE user_id = ? ORDER BY created_at DESC", 
        [user.id]
      ) as Array<Record<string, any>>;
      
      // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç–∑—ã–≤—ã
      const formattedReviews = reviews.map(review => ({
        id: review.id,
        userId: review.user_id,
        productId: review.product_id,
        rating: review.rating,
        text: review.text,
        images: review.images ? JSON.parse(review.images) : [],
        isApproved: review.is_approved === 1,
        createdAt: review.created_at,
      }));
      
      res.json(formattedReviews);
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–∑—ã–≤–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", error);
      res.status(500).json({
        message: "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –æ—Ç–∑—ã–≤—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", 
        error: error instanceof Error ? error.message : String(error)
      });
    }
  });
  
  // –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  app.get("/api/user/notifications", ensureAuthenticated, async (req, res) => {
    try {
      const user = req.user as any;
      
      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
      const notifications = db.query(
        "SELECT n.*, p.name as product_name, p.image_url FROM notifications n LEFT JOIN products p ON n.product_id = p.id WHERE n.user_id = ? ORDER BY n.created_at DESC", 
        [user.id]
      ) as Array<Record<string, any>>;
      
      // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
      const formattedNotifications = notifications.map(notification => ({
        id: notification.id,
        userId: notification.user_id,
        productId: notification.product_id,
        type: notification.type,
        seen: notification.seen === 1,
        product: notification.product_name ? {
          id: notification.product_id,
          name: notification.product_name,
          imageUrl: notification.image_url
        } : null,
        createdAt: notification.created_at,
      }));
      
      res.json(formattedNotifications);
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", error);
      res.status(500).json({ 
        message: "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
        error: error instanceof Error ? error.message : String(error)
      });
    }
  });

  // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  app.post("/api/auth/register", async (req, res) => {
    try {
      // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
      const { email, password, fullName, username, phone, address } = req.body;
      
      if (!email || !password) {
        return res.status(400).json({ 
          message: "–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏", 
          errors: { 
            email: !email ? "Email –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω" : null,
            password: !password ? "–ü–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω" : null 
          }
        });
      }
      
      if (password.length < 8) {
        return res.status(400).json({ 
          message: "–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏", 
          errors: { 
            password: "–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 8 —Å–∏–º–≤–æ–ª–æ–≤" 
          }
        });
      }
      
      try {
        // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é —è–≤–Ω–æ –∏–∑ auth-sqlite.ts 
        const { registerUser } = await import("./auth-sqlite");
        
        // –í—ã–ø–æ–ª–Ω—è–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
        const user = await registerUser({
          email, 
          password,
          fullName,
          username,
          phone,
          address
        });
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        req.login(user, (loginErr) => {
          if (loginErr) {
            console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:", loginErr);
            return res.json({
              message: "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞, –Ω–æ —Ç—Ä–µ–±—É–µ—Ç—Å—è –≤—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É",
              user
            });
          }
          
          // –£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
          res.json({
            message: "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞",
            user
          });
        });
      } catch (registerError: any) {
        if (registerError.message === '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç') {
          return res.status(400).json({
            message: "–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏",
            errors: { email: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç" }
          });
        }
        throw registerError;
      }
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:", error);
      res.status(500).json({
        message: "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è",
        error: error instanceof Error ? error.message : String(error)
      });
    }
  });

  // Create HTTP server
  return createServer(app);
}

// Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
function ensureAuthenticated(req: Request, res: Response, next: Function) {
  if (req.isAuthenticated()) {
    // –û–±–Ω–æ–≤–∏–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–µ—Ä–µ–¥ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ–º
    const updated = syncUserSession(req);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if (req.user && (req.user as any).id) {
      const userId = (req.user as any).id;
      
      // –ü—Ä–æ–≤–µ—Ä–∏–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ
      const existingUser = db.queryOne("SELECT * FROM users WHERE id = ?", [userId]);
      
      if (!existingUser) {
        console.error(`–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID ${userId} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö`);
        req.logout(() => {
          res.status(401).json({ message: "–°–µ—Å—Å–∏—è –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ —Å–Ω–æ–≤–∞." });
        });
        return;
      }
      
      console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ. –ë–∞–ª–∞–Ω—Å: ${(req.user as any).balance || '0'}`);
    return next();
  }
    
    console.error("–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω");
    res.status(401).json({ message: "–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω" });
    return;
  }
  
  res.status(401).json({ message: "–ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è" });
}

// Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º —Å–µ—Å—Å–∏–∏
function ensureAdmin(req: Request, res: Response, next: Function) {
  console.log("–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:", req.user);
  
  if (req.isAuthenticated() && req.user) {
    // –û–±–Ω–æ–≤–∏–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–µ—Ä–µ–¥ –ø—Ä–æ–≤–µ—Ä–∫–æ–π
    syncUserSession(req);
    
    const user = req.user as any;
    
    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à –∞–¥–º–∏–Ω–æ–≤
    if (adminCache.has(user.id)) {
      console.log("üîë –ü—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω—ã –∏–∑ –∫—ç—à–∞ –¥–ª—è:", user.email);
      
      // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∞–≤–∞ –≤ –æ–±—ä–µ–∫—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      user.isAdmin = true;
      user.is_admin = 1;
      
    return next();
  }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∞–¥–º–∏–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏ –ø–æ–ª—É—á–∞–µ–º —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ
      const dbUser = db.queryOne("SELECT * FROM users WHERE id = ?", [user.id]) as Record<string, any>;
      
      if (dbUser && (
          typeof dbUser === 'object' && 
          ('is_admin' in dbUser) && 
          (dbUser.is_admin === 1 || Boolean(dbUser.is_admin) === true)
        )) {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ—Å—Å–∏—é –∏ –¥–æ–±–∞–≤–ª—è–µ–º –≤ –∫—ç—à –∞–¥–º–∏–Ω–æ–≤
        user.isAdmin = true;
        user.is_admin = 1;
        adminCache.add(user.id);
        
        console.log("‚úì –ü—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω—ã –¥–ª—è:", user.email);
        return next();
      } else {
        console.log("‚úó –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∏–º–µ–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:", user.email);
      }
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:", error);
    }
  }
  
  res.status(403).json({ message: "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞" });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ CSV –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
function generateUsersCSV(users: Array<any>): string {
  const headers = [
    "ID", "–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", "Email", "–§–ò–û", "–¢–µ–ª–µ—Ñ–æ–Ω", 
    "–ê–¥—Ä–µ—Å", "–°—Ç–∞—Ç—É—Å", "–ë–∞–ª–∞–Ω—Å", "–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"
  ];

  let csvContent = headers.join(';') + '\n';
  
  users.forEach(user => {
    const fullName = `${user.first_name || ''} ${user.last_name || ''}`.trim();
    const row = [
      user.id,
      user.username || user.email,
      user.email,
      escapeCSVField(fullName),
      escapeCSVField(user.phone || ''),
      escapeCSVField(user.address || ''),
      user.is_admin ? "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä" : "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å",
      `${user.balance || '0'} ‚ÇΩ`,
      new Date(user.created_at).toLocaleDateString('ru-RU')
    ];
    
    csvContent += row.join(';') + '\n';
  });
  
  return csvContent;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ CSV –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
function generateStatisticsCSV(users: Array<any>, products: Array<any>, orders: Array<any>): string {
  let csvContent = "–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∞–π—Ç–∞\n\n";
  
  // –°–µ–∫—Ü–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  csvContent += "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n";
  csvContent += `–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π;${users.length}\n`;
  csvContent += `–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤;${users.filter(u => u.is_admin === 1).length}\n\n`;
  
  // –°–µ–∫—Ü–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤
  csvContent += "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤\n";
  csvContent += `–í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤;${products.length}\n`;
  csvContent += `–î–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤;${products.filter(p => p.is_available === 1).length}\n`;
  csvContent += `–¢–æ–≤–∞—Ä–æ–≤ –Ω–∞ –ø—Ä–µ–¥–∑–∞–∫–∞–∑;${products.filter(p => p.is_preorder === 1).length}\n\n`;
  
  // –°–µ–∫—Ü–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞–∫–∞–∑–æ–≤
  csvContent += "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–∫–∞–∑–æ–≤\n";
  csvContent += `–í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤;${orders.length}\n`;
  
  // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º –∑–∞–∫–∞–∑–æ–≤
  const ordersByStatus: Record<string, number> = {};
  orders.forEach(order => {
    const status = order.status || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
    ordersByStatus[status] = (ordersByStatus[status] || 0) + 1;
  });
  
  Object.entries(ordersByStatus).forEach(([status, count]) => {
    csvContent += `${status};${count}\n`;
  });
  
  return csvContent;
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª–µ–π –≤ CSV
function escapeCSVField(field: string): string {
  if (!field) return '';
  
  // –ü–æ—Å–∫–æ–ª—å–∫—É –º—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—á–∫—É —Å –∑–∞–ø—è—Ç–æ–π –∫–∞–∫ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å,
  // –Ω—É–∂–Ω–æ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ç–æ—á–∫—É —Å –∑–∞–ø—è—Ç–æ–π, –∫–∞–≤—ã—á–∫–∏ –∏ –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫
  if (field.includes(';') || field.includes('"') || field.includes('\n')) {
    // –ó–∞–º–µ–Ω—è–µ–º –∫–∞–≤—ã—á–∫–∏ –Ω–∞ –¥–≤–æ–π–Ω—ã–µ –∫–∞–≤—ã—á–∫–∏ –¥–ª—è —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    return `"${field.replace(/"/g, '""')}"`;
  }
  return field;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞
function formatProductForClient(product: any) {
  if (!product) return null;
  
  // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É JSON –≤ –º–∞—Å—Å–∏–≤ –¥–ª—è images –∏ labels
  let images = [];
  if (product.images) {
    try {
      images = typeof product.images === 'string' ? JSON.parse(product.images) : product.images;
    } catch (e) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ JSON images:", e);
    }
  }
  
  let labels = [];
  if (product.labels) {
    try {
      labels = typeof product.labels === 'string' ? JSON.parse(product.labels) : product.labels;
    } catch (e) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ JSON labels:", e);
    }
  }
  
  // –§–æ—Ä–º–∏—Ä—É–µ–º –æ–±—ä–µ–∫—Ç —Ç–æ–≤–∞—Ä–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –∏–º–µ–Ω–∞–º–∏ –ø–æ–ª–µ–π
  return {
    id: product.id,
    name: product.name,
    description: product.description,
    price: product.price,
    originalPrice: product.original_price,
    images: images,
    quantity: product.quantity,
    category: product.category,
    isAvailable: Boolean(product.is_available),
    isPreorder: Boolean(product.is_preorder),
    isRare: Boolean(product.is_rare),
    isEasyToCare: Boolean(product.is_easy_to_care),
    labels: labels,
    deliveryCost: product.delivery_cost,
    createdAt: product.created_at,
    updatedAt: product.updated_at
  };
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ CSV –¥–ª—è —Ç–æ–≤–∞—Ä–æ–≤
function generateProductsCSV(products: Array<any>): string {
  const headers = [
    "ID", "–ù–∞–∑–≤–∞–Ω–∏–µ", "–û–ø–∏—Å–∞–Ω–∏–µ", "–¶–µ–Ω–∞", "–ò—Å—Ö–æ–¥–Ω–∞—è —Ü–µ–Ω–∞", 
    "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ", "–ö–∞—Ç–µ–≥–æ—Ä–∏—è", "–î–æ—Å—Ç—É–ø–µ–Ω", "–ü—Ä–µ–¥–∑–∞–∫–∞–∑", 
    "–†–µ–¥–∫–∏–π", "–ü—Ä–æ—Å—Ç–æ–π —É—Ö–æ–¥", "–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è"
  ];

  let csvContent = headers.join(';') + '\n';
  
  products.forEach(product => {
    const row = [
      product.id,
      escapeCSVField(product.name || ''),
      escapeCSVField(product.description || ''),
      product.price ? product.price.toString().replace('.', ',') : '0',
      product.original_price ? product.original_price.toString().replace('.', ',') : '',
      product.quantity || '0',
      escapeCSVField(product.category || ''),
      product.is_available ? "–î–∞" : "–ù–µ—Ç",
      product.is_preorder ? "–î–∞" : "–ù–µ—Ç",
      product.is_rare ? "–î–∞" : "–ù–µ—Ç",
      product.is_easy_to_care ? "–î–∞" : "–ù–µ—Ç",
      new Date(product.created_at).toLocaleDateString('ru-RU')
    ];
    
    csvContent += row.join(';') + '\n';
  });
  
  return csvContent;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ CSV –¥–ª—è –∑–∞–∫–∞–∑–æ–≤
function generateOrdersCSV(orders: Array<any>): string {
  const headers = [
    "ID", "–ö–ª–∏–µ–Ω—Ç", "–¢–µ–ª–µ—Ñ–æ–Ω", "–ê–¥—Ä–µ—Å", "–°—É–º–º–∞", "–î–æ—Å—Ç–∞–≤–∫–∞", 
    "–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã", "–°—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã", "–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞", "–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è"
  ];

  let csvContent = headers.join(';') + '\n';
  
  orders.forEach(order => {
    const paymentMethodMap: Record<string, string> = {
      "yoomoney": "–û–Ω–ª–∞–π–Ω –æ–ø–ª–∞—Ç–∞",
      "directTransfer": "–ü—Ä—è–º–æ–π –ø–µ—Ä–µ–≤–æ–¥",
      "balance": "–ë–∞–ª–∞–Ω—Å"
    };
    
    const paymentStatusMap: Record<string, string> = {
      "pending": "–û–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã",
      "completed": "–û–ø–ª–∞—á–µ–Ω",
      "failed": "–û—à–∏–±–∫–∞ –æ–ø–ª–∞—Ç—ã"
    };
    
    const orderStatusMap: Record<string, string> = {
      "pending": "–í –æ–∂–∏–¥–∞–Ω–∏–∏",
      "processing": "–í –æ–±—Ä–∞–±–æ—Ç–∫–µ",
      "shipped": "–û—Ç–ø—Ä–∞–≤–ª–µ–Ω",
      "completed": "–ó–∞–≤–µ—Ä—à–µ–Ω",
      "cancelled": "–û—Ç–º–µ–Ω–µ–Ω"
    };
    
    const row = [
      order.id,
      escapeCSVField(order.full_name || ''),
      escapeCSVField(order.phone || ''),
      escapeCSVField(order.address || ''),
      `${parseFloat(order.total_amount || 0).toLocaleString('ru-RU')} ‚ÇΩ`,
      order.delivery_type === "cdek" ? "–°–î–≠–ö" : "–ü–æ—á—Ç–∞ –†–æ—Å—Å–∏–∏",
      paymentMethodMap[order.payment_method] || order.payment_method,
      paymentStatusMap[order.payment_status] || order.payment_status,
      orderStatusMap[order.order_status] || order.order_status,
      new Date(order.created_at).toLocaleDateString('ru-RU')
    ];
    
    csvContent += row.join(';') + '\n';
  });
  
  return csvContent;
}

// –ü—Ä—è–º–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –±–∞–ª–∞–Ω—Å–∞)
export function updateUserSession(req: Request) {
  if (req.isAuthenticated() && req.user) {
    const user = req.user as any;
    
    try {
      // –°–æ—Ö—Ä–∞–Ω–∏–º —Ç–µ–∫—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–µ—Ä–µ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º
      const prevIsAdmin = user.isAdmin === true || user.is_admin === 1;
      
      // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î —Å —è–≤–Ω–æ–π —Ç–∏–ø–∏–∑–∞—Ü–∏–µ–π
      const dbUser = db.queryOne("SELECT * FROM users WHERE id = ?", [user.id]) as Record<string, any> | null;
      
      if (dbUser) {
        // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–µ—Å—Å–∏–∏ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –Ω–∞–ª–∏—á–∏—è —Å–≤–æ–π—Å—Ç–≤
        const currentBalance = parseFloat(user.balance || "0");
        const newBalance = parseFloat(dbUser.balance || "0");
        
        // –õ–æ–≥–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞
        if (Math.abs(currentBalance - newBalance) > 0.01) {  // —É—á–∏—Ç—ã–≤–∞–µ–º –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç—å –ø—Ä–∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏–∏ float
          console.log(`–ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id} –æ–±–Ω–æ–≤–ª–µ–Ω: ${currentBalance} ‚Üí ${newBalance}`);
        }
        
        user.balance = dbUser.balance || "0";
        
        // –Ø–≤–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        if ((dbUser.is_admin === 1) || prevIsAdmin) {
          user.is_admin = 1;
          user.isAdmin = true;
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –¥—Ä—É–≥–∏–µ –≤–∞–∂–Ω—ã–µ –ø–æ–ª—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–∏ —Å—É—â–µ—Å—Ç–≤—É—é—Ç –≤ –æ–±—ä–µ–∫—Ç–µ
        if ('first_name' in dbUser) user.firstName = dbUser.first_name;
        if ('last_name' in dbUser) user.lastName = dbUser.last_name;
        
        console.log(`–°–µ—Å—Å–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${dbUser.email || 'unknown'} –æ–±–Ω–æ–≤–ª–µ–Ω–∞. –ê–¥–º–∏–Ω: ${user.isAdmin}, –ë–∞–ª–∞–Ω—Å: ${user.balance}`);
      }
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", error);
    }
  }
} 